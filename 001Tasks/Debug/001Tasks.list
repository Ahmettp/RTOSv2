
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b78  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004d08  08004d08  00005d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d80  08004d80  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  08004d80  08004d80  00005d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d88  08004d88  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d88  08004d88  00005d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d8c  08004d8c  00005d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004d90  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006070  2**0
                  CONTENTS
 10 .bss          00012f5c  20000070  20000070  00006070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012fcc  20012fcc  00006070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb2a  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000281d  00000000  00000000  00014bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f48  00000000  00000000  000173e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bbb  00000000  00000000  00018330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022df7  00000000  00000000  00018eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001143c  00000000  00000000  0003bce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3d60  00000000  00000000  0004d11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00120e7e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000458c  00000000  00000000  00120ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00125450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004cf0 	.word	0x08004cf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004cf0 	.word	0x08004cf0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fbb3 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f84d 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f8b5 	bl	800063c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from task-1", 2, &task1_handle);
 80004d2:	f107 0308 	add.w	r3, r7, #8
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	2302      	movs	r3, #2
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	4b1b      	ldr	r3, [pc, #108]	@ (800054c <main+0x8c>)
 80004de:	22c8      	movs	r2, #200	@ 0xc8
 80004e0:	491b      	ldr	r1, [pc, #108]	@ (8000550 <main+0x90>)
 80004e2:	481c      	ldr	r0, [pc, #112]	@ (8000554 <main+0x94>)
 80004e4:	f002 f95e 	bl	80027a4 <xTaskCreate>
 80004e8:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d00b      	beq.n	8000508 <main+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80004f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80004f4:	f383 8811 	msr	BASEPRI, r3
 80004f8:	f3bf 8f6f 	isb	sy
 80004fc:	f3bf 8f4f 	dsb	sy
 8000500:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000502:	bf00      	nop
 8000504:	bf00      	nop
 8000506:	e7fd      	b.n	8000504 <main+0x44>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from task-2", 2, &task2_handle);
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	2302      	movs	r3, #2
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <main+0x98>)
 8000512:	22c8      	movs	r2, #200	@ 0xc8
 8000514:	4911      	ldr	r1, [pc, #68]	@ (800055c <main+0x9c>)
 8000516:	4812      	ldr	r0, [pc, #72]	@ (8000560 <main+0xa0>)
 8000518:	f002 f944 	bl	80027a4 <xTaskCreate>
 800051c:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d00b      	beq.n	800053c <main+0x7c>
        __asm volatile
 8000524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000528:	f383 8811 	msr	BASEPRI, r3
 800052c:	f3bf 8f6f 	isb	sy
 8000530:	f3bf 8f4f 	dsb	sy
 8000534:	60fb      	str	r3, [r7, #12]
    }
 8000536:	bf00      	nop
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <main+0x78>
	printf("Hebele \n");
 800053c:	4809      	ldr	r0, [pc, #36]	@ (8000564 <main+0xa4>)
 800053e:	f004 f82d 	bl	800459c <puts>
  vTaskStartScheduler();
 8000542:	f002 fa9b 	bl	8002a7c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000546:	bf00      	nop
 8000548:	e7fd      	b.n	8000546 <main+0x86>
 800054a:	bf00      	nop
 800054c:	08004d08 	.word	0x08004d08
 8000550:	08004d20 	.word	0x08004d20
 8000554:	080008f9 	.word	0x080008f9
 8000558:	08004d28 	.word	0x08004d28
 800055c:	08004d40 	.word	0x08004d40
 8000560:	08000909 	.word	0x08000909
 8000564:	08004d48 	.word	0x08004d48

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	@ 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	@ 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f004 f8f0 	bl	800475c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b28      	ldr	r3, [pc, #160]	@ (8000634 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	4a27      	ldr	r2, [pc, #156]	@ (8000634 <SystemClock_Config+0xcc>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	@ 0x40
 800059c:	4b25      	ldr	r3, [pc, #148]	@ (8000634 <SystemClock_Config+0xcc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b22      	ldr	r3, [pc, #136]	@ (8000638 <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a21      	ldr	r2, [pc, #132]	@ (8000638 <SystemClock_Config+0xd0>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000638 <SystemClock_Config+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c4:	2302      	movs	r3, #2
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	2310      	movs	r3, #16
 80005ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d0:	2302      	movs	r3, #2
 80005d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d4:	2300      	movs	r3, #0
 80005d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d8:	2308      	movs	r3, #8
 80005da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005dc:	2332      	movs	r3, #50	@ 0x32
 80005de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e4:	2307      	movs	r3, #7
 80005e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0320 	add.w	r3, r7, #32
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fdf9 	bl	80011e4 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f8:	f000 f9a0 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2302      	movs	r3, #2
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000608:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800060c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000612:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f001 f85a 	bl	80016d4 <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000626:	f000 f989 	bl	800093c <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3750      	adds	r7, #80	@ 0x50
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08c      	sub	sp, #48	@ 0x30
 8000640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
 8000656:	4ba2      	ldr	r3, [pc, #648]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4aa1      	ldr	r2, [pc, #644]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 800065c:	f043 0310 	orr.w	r3, r3, #16
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b9f      	ldr	r3, [pc, #636]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0310 	and.w	r3, r3, #16
 800066a:	61bb      	str	r3, [r7, #24]
 800066c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	4b9b      	ldr	r3, [pc, #620]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a9a      	ldr	r2, [pc, #616]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b98      	ldr	r3, [pc, #608]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	4b94      	ldr	r3, [pc, #592]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a93      	ldr	r2, [pc, #588]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b91      	ldr	r3, [pc, #580]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	4b8d      	ldr	r3, [pc, #564]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a8c      	ldr	r2, [pc, #560]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b8a      	ldr	r3, [pc, #552]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	4b86      	ldr	r3, [pc, #536]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a85      	ldr	r2, [pc, #532]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d2:	4b83      	ldr	r3, [pc, #524]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b7f      	ldr	r3, [pc, #508]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	4a7e      	ldr	r2, [pc, #504]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 80006e8:	f043 0308 	orr.w	r3, r3, #8
 80006ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ee:	4b7c      	ldr	r3, [pc, #496]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2108      	movs	r1, #8
 80006fe:	4879      	ldr	r0, [pc, #484]	@ (80008e4 <MX_GPIO_Init+0x2a8>)
 8000700:	f000 fd56 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2101      	movs	r1, #1
 8000708:	4877      	ldr	r0, [pc, #476]	@ (80008e8 <MX_GPIO_Init+0x2ac>)
 800070a:	f000 fd51 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800070e:	2200      	movs	r2, #0
 8000710:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000714:	4875      	ldr	r0, [pc, #468]	@ (80008ec <MX_GPIO_Init+0x2b0>)
 8000716:	f000 fd4b 	bl	80011b0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800071a:	2308      	movs	r3, #8
 800071c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	2301      	movs	r3, #1
 8000720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	486c      	ldr	r0, [pc, #432]	@ (80008e4 <MX_GPIO_Init+0x2a8>)
 8000732:	f000 fba1 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000736:	2301      	movs	r3, #1
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	2301      	movs	r3, #1
 800073c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	2300      	movs	r3, #0
 8000744:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	4866      	ldr	r0, [pc, #408]	@ (80008e8 <MX_GPIO_Init+0x2ac>)
 800074e:	f000 fb93 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000752:	2308      	movs	r3, #8
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000756:	2302      	movs	r3, #2
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000762:	2305      	movs	r3, #5
 8000764:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	485e      	ldr	r0, [pc, #376]	@ (80008e8 <MX_GPIO_Init+0x2ac>)
 800076e:	f000 fb83 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000772:	2301      	movs	r3, #1
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000776:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4619      	mov	r1, r3
 8000786:	485a      	ldr	r0, [pc, #360]	@ (80008f0 <MX_GPIO_Init+0x2b4>)
 8000788:	f000 fb76 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800078c:	2310      	movs	r3, #16
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800079c:	2306      	movs	r3, #6
 800079e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	4852      	ldr	r0, [pc, #328]	@ (80008f0 <MX_GPIO_Init+0x2b4>)
 80007a8:	f000 fb66 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007ac:	23e0      	movs	r3, #224	@ 0xe0
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007bc:	2305      	movs	r3, #5
 80007be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	4619      	mov	r1, r3
 80007c6:	484a      	ldr	r0, [pc, #296]	@ (80008f0 <MX_GPIO_Init+0x2b4>)
 80007c8:	f000 fb56 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007cc:	2304      	movs	r3, #4
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	4845      	ldr	r0, [pc, #276]	@ (80008f4 <MX_GPIO_Init+0x2b8>)
 80007e0:	f000 fb4a 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007f6:	2305      	movs	r3, #5
 80007f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	483c      	ldr	r0, [pc, #240]	@ (80008f4 <MX_GPIO_Init+0x2b8>)
 8000802:	f000 fb39 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000806:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800080a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	4833      	ldr	r0, [pc, #204]	@ (80008ec <MX_GPIO_Init+0x2b0>)
 8000820:	f000 fb2a 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000824:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000836:	2306      	movs	r3, #6
 8000838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	4829      	ldr	r0, [pc, #164]	@ (80008e8 <MX_GPIO_Init+0x2ac>)
 8000842:	f000 fb19 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000846:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	4825      	ldr	r0, [pc, #148]	@ (80008f0 <MX_GPIO_Init+0x2b4>)
 800085c:	f000 fb0c 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000860:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000872:	230a      	movs	r3, #10
 8000874:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	481c      	ldr	r0, [pc, #112]	@ (80008f0 <MX_GPIO_Init+0x2b4>)
 800087e:	f000 fafb 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000882:	2320      	movs	r3, #32
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4815      	ldr	r0, [pc, #84]	@ (80008ec <MX_GPIO_Init+0x2b0>)
 8000896:	f000 faef 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800089a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a0:	2312      	movs	r3, #18
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ac:	2304      	movs	r3, #4
 80008ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	480f      	ldr	r0, [pc, #60]	@ (80008f4 <MX_GPIO_Init+0x2b8>)
 80008b8:	f000 fade 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008bc:	2302      	movs	r3, #2
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008c0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <MX_GPIO_Init+0x2a8>)
 80008d2:	f000 fad1 	bl	8000e78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d6:	bf00      	nop
 80008d8:	3730      	adds	r7, #48	@ 0x30
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40020800 	.word	0x40020800
 80008ec:	40020c00 	.word	0x40020c00
 80008f0:	40020000 	.word	0x40020000
 80008f4:	40020400 	.word	0x40020400

080008f8 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void *parameters)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char*)parameters);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f003 fe4b 	bl	800459c <puts>
 8000906:	e7fb      	b.n	8000900 <task1_handler+0x8>

08000908 <task2_handler>:
	}
}

static void task2_handler(void *parameters)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char*)parameters);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f003 fe43 	bl	800459c <puts>
 8000916:	e7fb      	b.n	8000910 <task2_handler+0x8>

08000918 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a04      	ldr	r2, [pc, #16]	@ (8000938 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d101      	bne.n	800092e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092a:	f000 f9a3 	bl	8000c74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40001000 	.word	0x40001000

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <Error_Handler+0x8>

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000956:	4a0f      	ldr	r2, [pc, #60]	@ (8000994 <HAL_MspInit+0x4c>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800095c:	6453      	str	r3, [r2, #68]	@ 0x44
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000972:	4a08      	ldr	r2, [pc, #32]	@ (8000994 <HAL_MspInit+0x4c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	@ 0x40
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	@ 0x38
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	4b33      	ldr	r3, [pc, #204]	@ (8000a7c <HAL_InitTick+0xe4>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b0:	4a32      	ldr	r2, [pc, #200]	@ (8000a7c <HAL_InitTick+0xe4>)
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b8:	4b30      	ldr	r3, [pc, #192]	@ (8000a7c <HAL_InitTick+0xe4>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009bc:	f003 0310 	and.w	r3, r3, #16
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c4:	f107 0210 	add.w	r2, r7, #16
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4611      	mov	r1, r2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 f88c 	bl	8001aec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009d4:	6a3b      	ldr	r3, [r7, #32]
 80009d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d103      	bne.n	80009e6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009de:	f001 f871 	bl	8001ac4 <HAL_RCC_GetPCLK1Freq>
 80009e2:	6378      	str	r0, [r7, #52]	@ 0x34
 80009e4:	e004      	b.n	80009f0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009e6:	f001 f86d 	bl	8001ac4 <HAL_RCC_GetPCLK1Freq>
 80009ea:	4603      	mov	r3, r0
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009f2:	4a23      	ldr	r2, [pc, #140]	@ (8000a80 <HAL_InitTick+0xe8>)
 80009f4:	fba2 2303 	umull	r2, r3, r2, r3
 80009f8:	0c9b      	lsrs	r3, r3, #18
 80009fa:	3b01      	subs	r3, #1
 80009fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009fe:	4b21      	ldr	r3, [pc, #132]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a00:	4a21      	ldr	r2, [pc, #132]	@ (8000a88 <HAL_InitTick+0xf0>)
 8000a02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a04:	4b1f      	ldr	r3, [pc, #124]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a06:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a0a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a10:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a18:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a24:	4817      	ldr	r0, [pc, #92]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a26:	f001 f893 	bl	8001b50 <HAL_TIM_Base_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d11b      	bne.n	8000a70 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a38:	4812      	ldr	r0, [pc, #72]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a3a:	f001 f8e3 	bl	8001c04 <HAL_TIM_Base_Start_IT>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d111      	bne.n	8000a70 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a4c:	2036      	movs	r0, #54	@ 0x36
 8000a4e:	f000 fa05 	bl	8000e5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d808      	bhi.n	8000a6a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	2036      	movs	r0, #54	@ 0x36
 8000a5e:	f000 f9e1 	bl	8000e24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a62:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <HAL_InitTick+0xf4>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	e002      	b.n	8000a70 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3738      	adds	r7, #56	@ 0x38
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	431bde83 	.word	0x431bde83
 8000a84:	2000008c 	.word	0x2000008c
 8000a88:	40001000 	.word	0x40001000
 8000a8c:	20000004 	.word	0x20000004

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <NMI_Handler+0x4>

08000a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000acc:	4802      	ldr	r0, [pc, #8]	@ (8000ad8 <TIM6_DAC_IRQHandler+0x10>)
 8000ace:	f001 f909 	bl	8001ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000008c 	.word	0x2000008c

08000adc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	e00a      	b.n	8000b04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aee:	f3af 8000 	nop.w
 8000af2:	4601      	mov	r1, r0
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	1c5a      	adds	r2, r3, #1
 8000af8:	60ba      	str	r2, [r7, #8]
 8000afa:	b2ca      	uxtb	r2, r1
 8000afc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	3301      	adds	r3, #1
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697a      	ldr	r2, [r7, #20]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	dbf0      	blt.n	8000aee <_read+0x12>
  }

  return len;
 8000b0c:	687b      	ldr	r3, [r7, #4]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b086      	sub	sp, #24
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	e009      	b.n	8000b3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	1c5a      	adds	r2, r3, #1
 8000b2c:	60ba      	str	r2, [r7, #8]
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697a      	ldr	r2, [r7, #20]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	dbf1      	blt.n	8000b28 <_write+0x12>
  }
  return len;
 8000b44:	687b      	ldr	r3, [r7, #4]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <_close>:

int _close(int file)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b76:	605a      	str	r2, [r3, #4]
  return 0;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <_isatty>:

int _isatty(int file)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	@ (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000be0:	f7ff ffea 	bl	8000bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	@ (8000c18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	@ (8000c1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f003 fdf5 	bl	80047f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0e:	f7ff fc57 	bl	80004c0 <main>
  bx  lr    
 8000c12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c20:	08004d90 	.word	0x08004d90
  ldr r2, =_sbss
 8000c24:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c28:	20012fcc 	.word	0x20012fcc

08000c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c34:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <HAL_Init+0x40>)
 8000c3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c40:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <HAL_Init+0x40>)
 8000c46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a07      	ldr	r2, [pc, #28]	@ (8000c70 <HAL_Init+0x40>)
 8000c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 f8d8 	bl	8000e0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5e:	200f      	movs	r0, #15
 8000c60:	f7ff fe9a 	bl	8000998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f7ff fe70 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023c00 	.word	0x40023c00

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	200000d4 	.word	0x200000d4

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	@ (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	200000d4 	.word	0x200000d4

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4907      	ldr	r1, [pc, #28]	@ (8000d50 <__NVIC_EnableIRQ+0x38>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	@ (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	@ (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	@ 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	@ 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ff4c 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
 8000e30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e36:	f7ff ff61 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	68b9      	ldr	r1, [r7, #8]
 8000e40:	6978      	ldr	r0, [r7, #20]
 8000e42:	f7ff ffb1 	bl	8000da8 <NVIC_EncodePriority>
 8000e46:	4602      	mov	r2, r0
 8000e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff80 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff54 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	@ 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
 8000e92:	e16b      	b.n	800116c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e94:	2201      	movs	r2, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	f040 815a 	bne.w	8001166 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d005      	beq.n	8000eca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d130      	bne.n	8000f2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f00:	2201      	movs	r2, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	091b      	lsrs	r3, r3, #4
 8000f16:	f003 0201 	and.w	r2, r3, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	d017      	beq.n	8000f68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d123      	bne.n	8000fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	08da      	lsrs	r2, r3, #3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3208      	adds	r2, #8
 8000f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	220f      	movs	r2, #15
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	691a      	ldr	r2, [r3, #16]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	08da      	lsrs	r2, r3, #3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3208      	adds	r2, #8
 8000fb6:	69b9      	ldr	r1, [r7, #24]
 8000fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0203 	and.w	r2, r3, #3
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 80b4 	beq.w	8001166 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b60      	ldr	r3, [pc, #384]	@ (8001184 <HAL_GPIO_Init+0x30c>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001006:	4a5f      	ldr	r2, [pc, #380]	@ (8001184 <HAL_GPIO_Init+0x30c>)
 8001008:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800100c:	6453      	str	r3, [r2, #68]	@ 0x44
 800100e:	4b5d      	ldr	r3, [pc, #372]	@ (8001184 <HAL_GPIO_Init+0x30c>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800101a:	4a5b      	ldr	r2, [pc, #364]	@ (8001188 <HAL_GPIO_Init+0x310>)
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	089b      	lsrs	r3, r3, #2
 8001020:	3302      	adds	r3, #2
 8001022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	220f      	movs	r2, #15
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a52      	ldr	r2, [pc, #328]	@ (800118c <HAL_GPIO_Init+0x314>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d02b      	beq.n	800109e <HAL_GPIO_Init+0x226>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a51      	ldr	r2, [pc, #324]	@ (8001190 <HAL_GPIO_Init+0x318>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d025      	beq.n	800109a <HAL_GPIO_Init+0x222>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a50      	ldr	r2, [pc, #320]	@ (8001194 <HAL_GPIO_Init+0x31c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d01f      	beq.n	8001096 <HAL_GPIO_Init+0x21e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4f      	ldr	r2, [pc, #316]	@ (8001198 <HAL_GPIO_Init+0x320>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d019      	beq.n	8001092 <HAL_GPIO_Init+0x21a>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4e      	ldr	r2, [pc, #312]	@ (800119c <HAL_GPIO_Init+0x324>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d013      	beq.n	800108e <HAL_GPIO_Init+0x216>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4d      	ldr	r2, [pc, #308]	@ (80011a0 <HAL_GPIO_Init+0x328>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d00d      	beq.n	800108a <HAL_GPIO_Init+0x212>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a4c      	ldr	r2, [pc, #304]	@ (80011a4 <HAL_GPIO_Init+0x32c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d007      	beq.n	8001086 <HAL_GPIO_Init+0x20e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4b      	ldr	r2, [pc, #300]	@ (80011a8 <HAL_GPIO_Init+0x330>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d101      	bne.n	8001082 <HAL_GPIO_Init+0x20a>
 800107e:	2307      	movs	r3, #7
 8001080:	e00e      	b.n	80010a0 <HAL_GPIO_Init+0x228>
 8001082:	2308      	movs	r3, #8
 8001084:	e00c      	b.n	80010a0 <HAL_GPIO_Init+0x228>
 8001086:	2306      	movs	r3, #6
 8001088:	e00a      	b.n	80010a0 <HAL_GPIO_Init+0x228>
 800108a:	2305      	movs	r3, #5
 800108c:	e008      	b.n	80010a0 <HAL_GPIO_Init+0x228>
 800108e:	2304      	movs	r3, #4
 8001090:	e006      	b.n	80010a0 <HAL_GPIO_Init+0x228>
 8001092:	2303      	movs	r3, #3
 8001094:	e004      	b.n	80010a0 <HAL_GPIO_Init+0x228>
 8001096:	2302      	movs	r3, #2
 8001098:	e002      	b.n	80010a0 <HAL_GPIO_Init+0x228>
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <HAL_GPIO_Init+0x228>
 800109e:	2300      	movs	r3, #0
 80010a0:	69fa      	ldr	r2, [r7, #28]
 80010a2:	f002 0203 	and.w	r2, r2, #3
 80010a6:	0092      	lsls	r2, r2, #2
 80010a8:	4093      	lsls	r3, r2
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b0:	4935      	ldr	r1, [pc, #212]	@ (8001188 <HAL_GPIO_Init+0x310>)
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	089b      	lsrs	r3, r3, #2
 80010b6:	3302      	adds	r3, #2
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010be:	4b3b      	ldr	r3, [pc, #236]	@ (80011ac <HAL_GPIO_Init+0x334>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e2:	4a32      	ldr	r2, [pc, #200]	@ (80011ac <HAL_GPIO_Init+0x334>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e8:	4b30      	ldr	r3, [pc, #192]	@ (80011ac <HAL_GPIO_Init+0x334>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800110c:	4a27      	ldr	r2, [pc, #156]	@ (80011ac <HAL_GPIO_Init+0x334>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001112:	4b26      	ldr	r3, [pc, #152]	@ (80011ac <HAL_GPIO_Init+0x334>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001136:	4a1d      	ldr	r2, [pc, #116]	@ (80011ac <HAL_GPIO_Init+0x334>)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800113c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <HAL_GPIO_Init+0x334>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001160:	4a12      	ldr	r2, [pc, #72]	@ (80011ac <HAL_GPIO_Init+0x334>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3301      	adds	r3, #1
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	2b0f      	cmp	r3, #15
 8001170:	f67f ae90 	bls.w	8000e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3724      	adds	r7, #36	@ 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800
 8001188:	40013800 	.word	0x40013800
 800118c:	40020000 	.word	0x40020000
 8001190:	40020400 	.word	0x40020400
 8001194:	40020800 	.word	0x40020800
 8001198:	40020c00 	.word	0x40020c00
 800119c:	40021000 	.word	0x40021000
 80011a0:	40021400 	.word	0x40021400
 80011a4:	40021800 	.word	0x40021800
 80011a8:	40021c00 	.word	0x40021c00
 80011ac:	40013c00 	.word	0x40013c00

080011b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]
 80011bc:	4613      	mov	r3, r2
 80011be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c0:	787b      	ldrb	r3, [r7, #1]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c6:	887a      	ldrh	r2, [r7, #2]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011cc:	e003      	b.n	80011d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ce:	887b      	ldrh	r3, [r7, #2]
 80011d0:	041a      	lsls	r2, r3, #16
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	619a      	str	r2, [r3, #24]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e267      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d075      	beq.n	80012ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001202:	4b88      	ldr	r3, [pc, #544]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b04      	cmp	r3, #4
 800120c:	d00c      	beq.n	8001228 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120e:	4b85      	ldr	r3, [pc, #532]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001216:	2b08      	cmp	r3, #8
 8001218:	d112      	bne.n	8001240 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800121a:	4b82      	ldr	r3, [pc, #520]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001222:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001226:	d10b      	bne.n	8001240 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001228:	4b7e      	ldr	r3, [pc, #504]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d05b      	beq.n	80012ec <HAL_RCC_OscConfig+0x108>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d157      	bne.n	80012ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e242      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001248:	d106      	bne.n	8001258 <HAL_RCC_OscConfig+0x74>
 800124a:	4b76      	ldr	r3, [pc, #472]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a75      	ldr	r2, [pc, #468]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	e01d      	b.n	8001294 <HAL_RCC_OscConfig+0xb0>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001260:	d10c      	bne.n	800127c <HAL_RCC_OscConfig+0x98>
 8001262:	4b70      	ldr	r3, [pc, #448]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a6f      	ldr	r2, [pc, #444]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	4b6d      	ldr	r3, [pc, #436]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a6c      	ldr	r2, [pc, #432]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e00b      	b.n	8001294 <HAL_RCC_OscConfig+0xb0>
 800127c:	4b69      	ldr	r3, [pc, #420]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a68      	ldr	r2, [pc, #416]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b66      	ldr	r3, [pc, #408]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a65      	ldr	r2, [pc, #404]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 800128e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d013      	beq.n	80012c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fcfe 	bl	8000c9c <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a4:	f7ff fcfa 	bl	8000c9c <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b64      	cmp	r3, #100	@ 0x64
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e207      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0xc0>
 80012c2:	e014      	b.n	80012ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fcea 	bl	8000c9c <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fce6 	bl	8000c9c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	@ 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e1f3      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012de:	4b51      	ldr	r3, [pc, #324]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0xe8>
 80012ea:	e000      	b.n	80012ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d063      	beq.n	80013c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00b      	beq.n	800131e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001306:	4b47      	ldr	r3, [pc, #284]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800130e:	2b08      	cmp	r3, #8
 8001310:	d11c      	bne.n	800134c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001312:	4b44      	ldr	r3, [pc, #272]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d116      	bne.n	800134c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131e:	4b41      	ldr	r3, [pc, #260]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d005      	beq.n	8001336 <HAL_RCC_OscConfig+0x152>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d001      	beq.n	8001336 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e1c7      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001336:	4b3b      	ldr	r3, [pc, #236]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	4937      	ldr	r1, [pc, #220]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001346:	4313      	orrs	r3, r2
 8001348:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134a:	e03a      	b.n	80013c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d020      	beq.n	8001396 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001354:	4b34      	ldr	r3, [pc, #208]	@ (8001428 <HAL_RCC_OscConfig+0x244>)
 8001356:	2201      	movs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135a:	f7ff fc9f 	bl	8000c9c <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001362:	f7ff fc9b 	bl	8000c9c <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e1a8      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001374:	4b2b      	ldr	r3, [pc, #172]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001380:	4b28      	ldr	r3, [pc, #160]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	4925      	ldr	r1, [pc, #148]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 8001390:	4313      	orrs	r3, r2
 8001392:	600b      	str	r3, [r1, #0]
 8001394:	e015      	b.n	80013c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001396:	4b24      	ldr	r3, [pc, #144]	@ (8001428 <HAL_RCC_OscConfig+0x244>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139c:	f7ff fc7e 	bl	8000c9c <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a4:	f7ff fc7a 	bl	8000c9c <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e187      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d036      	beq.n	800143c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d016      	beq.n	8001404 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <HAL_RCC_OscConfig+0x248>)
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013dc:	f7ff fc5e 	bl	8000c9c <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e4:	f7ff fc5a 	bl	8000c9c <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e167      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <HAL_RCC_OscConfig+0x240>)
 80013f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x200>
 8001402:	e01b      	b.n	800143c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001404:	4b09      	ldr	r3, [pc, #36]	@ (800142c <HAL_RCC_OscConfig+0x248>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140a:	f7ff fc47 	bl	8000c9c <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001410:	e00e      	b.n	8001430 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001412:	f7ff fc43 	bl	8000c9c <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d907      	bls.n	8001430 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e150      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
 8001424:	40023800 	.word	0x40023800
 8001428:	42470000 	.word	0x42470000
 800142c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001430:	4b88      	ldr	r3, [pc, #544]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 8001432:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1ea      	bne.n	8001412 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 8097 	beq.w	8001578 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800144e:	4b81      	ldr	r3, [pc, #516]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10f      	bne.n	800147a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	4b7d      	ldr	r3, [pc, #500]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	4a7c      	ldr	r2, [pc, #496]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001468:	6413      	str	r3, [r2, #64]	@ 0x40
 800146a:	4b7a      	ldr	r3, [pc, #488]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001476:	2301      	movs	r3, #1
 8001478:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147a:	4b77      	ldr	r3, [pc, #476]	@ (8001658 <HAL_RCC_OscConfig+0x474>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001482:	2b00      	cmp	r3, #0
 8001484:	d118      	bne.n	80014b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001486:	4b74      	ldr	r3, [pc, #464]	@ (8001658 <HAL_RCC_OscConfig+0x474>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a73      	ldr	r2, [pc, #460]	@ (8001658 <HAL_RCC_OscConfig+0x474>)
 800148c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001492:	f7ff fc03 	bl	8000c9c <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800149a:	f7ff fbff 	bl	8000c9c <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e10c      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001658 <HAL_RCC_OscConfig+0x474>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0f0      	beq.n	800149a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d106      	bne.n	80014ce <HAL_RCC_OscConfig+0x2ea>
 80014c0:	4b64      	ldr	r3, [pc, #400]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 80014c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014c4:	4a63      	ldr	r2, [pc, #396]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80014cc:	e01c      	b.n	8001508 <HAL_RCC_OscConfig+0x324>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b05      	cmp	r3, #5
 80014d4:	d10c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x30c>
 80014d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 80014d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014da:	4a5e      	ldr	r2, [pc, #376]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80014e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 80014e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80014ee:	e00b      	b.n	8001508 <HAL_RCC_OscConfig+0x324>
 80014f0:	4b58      	ldr	r3, [pc, #352]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 80014f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014f4:	4a57      	ldr	r2, [pc, #348]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 80014f6:	f023 0301 	bic.w	r3, r3, #1
 80014fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80014fc:	4b55      	ldr	r3, [pc, #340]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 80014fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001500:	4a54      	ldr	r2, [pc, #336]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 8001502:	f023 0304 	bic.w	r3, r3, #4
 8001506:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d015      	beq.n	800153c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001510:	f7ff fbc4 	bl	8000c9c <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001516:	e00a      	b.n	800152e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001518:	f7ff fbc0 	bl	8000c9c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001526:	4293      	cmp	r3, r2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e0cb      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152e:	4b49      	ldr	r3, [pc, #292]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0ee      	beq.n	8001518 <HAL_RCC_OscConfig+0x334>
 800153a:	e014      	b.n	8001566 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153c:	f7ff fbae 	bl	8000c9c <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001542:	e00a      	b.n	800155a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001544:	f7ff fbaa 	bl	8000c9c <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001552:	4293      	cmp	r3, r2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e0b5      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800155a:	4b3e      	ldr	r3, [pc, #248]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 800155c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1ee      	bne.n	8001544 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001566:	7dfb      	ldrb	r3, [r7, #23]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d105      	bne.n	8001578 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800156c:	4b39      	ldr	r3, [pc, #228]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001570:	4a38      	ldr	r2, [pc, #224]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 8001572:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001576:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 80a1 	beq.w	80016c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001582:	4b34      	ldr	r3, [pc, #208]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b08      	cmp	r3, #8
 800158c:	d05c      	beq.n	8001648 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d141      	bne.n	800161a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001596:	4b31      	ldr	r3, [pc, #196]	@ (800165c <HAL_RCC_OscConfig+0x478>)
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7ff fb7e 	bl	8000c9c <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a4:	f7ff fb7a 	bl	8000c9c <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e087      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b6:	4b27      	ldr	r3, [pc, #156]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69da      	ldr	r2, [r3, #28]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d0:	019b      	lsls	r3, r3, #6
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d8:	085b      	lsrs	r3, r3, #1
 80015da:	3b01      	subs	r3, #1
 80015dc:	041b      	lsls	r3, r3, #16
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e4:	061b      	lsls	r3, r3, #24
 80015e6:	491b      	ldr	r1, [pc, #108]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015ec:	4b1b      	ldr	r3, [pc, #108]	@ (800165c <HAL_RCC_OscConfig+0x478>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f2:	f7ff fb53 	bl	8000c9c <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fa:	f7ff fb4f 	bl	8000c9c <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e05c      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160c:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f0      	beq.n	80015fa <HAL_RCC_OscConfig+0x416>
 8001618:	e054      	b.n	80016c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161a:	4b10      	ldr	r3, [pc, #64]	@ (800165c <HAL_RCC_OscConfig+0x478>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fb3c 	bl	8000c9c <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001628:	f7ff fb38 	bl	8000c9c <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e045      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800163a:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <HAL_RCC_OscConfig+0x470>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x444>
 8001646:	e03d      	b.n	80016c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d107      	bne.n	8001660 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e038      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
 8001654:	40023800 	.word	0x40023800
 8001658:	40007000 	.word	0x40007000
 800165c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001660:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <HAL_RCC_OscConfig+0x4ec>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d028      	beq.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001678:	429a      	cmp	r2, r3
 800167a:	d121      	bne.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001686:	429a      	cmp	r2, r3
 8001688:	d11a      	bne.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001690:	4013      	ands	r3, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001696:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001698:	4293      	cmp	r3, r2
 800169a:	d111      	bne.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a6:	085b      	lsrs	r3, r3, #1
 80016a8:	3b01      	subs	r3, #1
 80016aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d107      	bne.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d001      	beq.n	80016c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800

080016d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0cc      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016e8:	4b68      	ldr	r3, [pc, #416]	@ (800188c <HAL_RCC_ClockConfig+0x1b8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d90c      	bls.n	8001710 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f6:	4b65      	ldr	r3, [pc, #404]	@ (800188c <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fe:	4b63      	ldr	r3, [pc, #396]	@ (800188c <HAL_RCC_ClockConfig+0x1b8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e0b8      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d020      	beq.n	800175e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001728:	4b59      	ldr	r3, [pc, #356]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	4a58      	ldr	r2, [pc, #352]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001732:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001740:	4b53      	ldr	r3, [pc, #332]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	4a52      	ldr	r2, [pc, #328]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800174a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800174c:	4b50      	ldr	r3, [pc, #320]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	494d      	ldr	r1, [pc, #308]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	4313      	orrs	r3, r2
 800175c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d044      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d107      	bne.n	8001782 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001772:	4b47      	ldr	r3, [pc, #284]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d119      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e07f      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d003      	beq.n	8001792 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800178e:	2b03      	cmp	r3, #3
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001792:	4b3f      	ldr	r3, [pc, #252]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e06f      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e067      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017b2:	4b37      	ldr	r3, [pc, #220]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f023 0203 	bic.w	r2, r3, #3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	4934      	ldr	r1, [pc, #208]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017c4:	f7ff fa6a 	bl	8000c9c <HAL_GetTick>
 80017c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ca:	e00a      	b.n	80017e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017cc:	f7ff fa66 	bl	8000c9c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017da:	4293      	cmp	r3, r2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e04f      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 020c 	and.w	r2, r3, #12
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d1eb      	bne.n	80017cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017f4:	4b25      	ldr	r3, [pc, #148]	@ (800188c <HAL_RCC_ClockConfig+0x1b8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d20c      	bcs.n	800181c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b22      	ldr	r3, [pc, #136]	@ (800188c <HAL_RCC_ClockConfig+0x1b8>)
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180a:	4b20      	ldr	r3, [pc, #128]	@ (800188c <HAL_RCC_ClockConfig+0x1b8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d001      	beq.n	800181c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e032      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d008      	beq.n	800183a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001828:	4b19      	ldr	r3, [pc, #100]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	4916      	ldr	r1, [pc, #88]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	4313      	orrs	r3, r2
 8001838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b00      	cmp	r3, #0
 8001844:	d009      	beq.n	800185a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001846:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	490e      	ldr	r1, [pc, #56]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	4313      	orrs	r3, r2
 8001858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800185a:	f000 f821 	bl	80018a0 <HAL_RCC_GetSysClockFreq>
 800185e:	4602      	mov	r2, r0
 8001860:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	490a      	ldr	r1, [pc, #40]	@ (8001894 <HAL_RCC_ClockConfig+0x1c0>)
 800186c:	5ccb      	ldrb	r3, [r1, r3]
 800186e:	fa22 f303 	lsr.w	r3, r2, r3
 8001872:	4a09      	ldr	r2, [pc, #36]	@ (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 8001874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001876:	4b09      	ldr	r3, [pc, #36]	@ (800189c <HAL_RCC_ClockConfig+0x1c8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff f88c 	bl	8000998 <HAL_InitTick>

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023c00 	.word	0x40023c00
 8001890:	40023800 	.word	0x40023800
 8001894:	08004d68 	.word	0x08004d68
 8001898:	20000000 	.word	0x20000000
 800189c:	20000004 	.word	0x20000004

080018a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018a4:	b094      	sub	sp, #80	@ 0x50
 80018a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80018ac:	2300      	movs	r3, #0
 80018ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018b0:	2300      	movs	r3, #0
 80018b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018b8:	4b79      	ldr	r3, [pc, #484]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d00d      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x40>
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	f200 80e1 	bhi.w	8001a8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <HAL_RCC_GetSysClockFreq+0x34>
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	d003      	beq.n	80018da <HAL_RCC_GetSysClockFreq+0x3a>
 80018d2:	e0db      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018d4:	4b73      	ldr	r3, [pc, #460]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 80018d6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80018d8:	e0db      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018da:	4b73      	ldr	r3, [pc, #460]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0x208>)
 80018dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018de:	e0d8      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018e0:	4b6f      	ldr	r3, [pc, #444]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ea:	4b6d      	ldr	r3, [pc, #436]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d063      	beq.n	80019be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f6:	4b6a      	ldr	r3, [pc, #424]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	099b      	lsrs	r3, r3, #6
 80018fc:	2200      	movs	r2, #0
 80018fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001900:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001908:	633b      	str	r3, [r7, #48]	@ 0x30
 800190a:	2300      	movs	r3, #0
 800190c:	637b      	str	r3, [r7, #52]	@ 0x34
 800190e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001912:	4622      	mov	r2, r4
 8001914:	462b      	mov	r3, r5
 8001916:	f04f 0000 	mov.w	r0, #0
 800191a:	f04f 0100 	mov.w	r1, #0
 800191e:	0159      	lsls	r1, r3, #5
 8001920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001924:	0150      	lsls	r0, r2, #5
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4621      	mov	r1, r4
 800192c:	1a51      	subs	r1, r2, r1
 800192e:	6139      	str	r1, [r7, #16]
 8001930:	4629      	mov	r1, r5
 8001932:	eb63 0301 	sbc.w	r3, r3, r1
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001944:	4659      	mov	r1, fp
 8001946:	018b      	lsls	r3, r1, #6
 8001948:	4651      	mov	r1, sl
 800194a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800194e:	4651      	mov	r1, sl
 8001950:	018a      	lsls	r2, r1, #6
 8001952:	4651      	mov	r1, sl
 8001954:	ebb2 0801 	subs.w	r8, r2, r1
 8001958:	4659      	mov	r1, fp
 800195a:	eb63 0901 	sbc.w	r9, r3, r1
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800196a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800196e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001972:	4690      	mov	r8, r2
 8001974:	4699      	mov	r9, r3
 8001976:	4623      	mov	r3, r4
 8001978:	eb18 0303 	adds.w	r3, r8, r3
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	462b      	mov	r3, r5
 8001980:	eb49 0303 	adc.w	r3, r9, r3
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001992:	4629      	mov	r1, r5
 8001994:	024b      	lsls	r3, r1, #9
 8001996:	4621      	mov	r1, r4
 8001998:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800199c:	4621      	mov	r1, r4
 800199e:	024a      	lsls	r2, r1, #9
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019a6:	2200      	movs	r2, #0
 80019a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80019b0:	f7fe fc0e 	bl	80001d0 <__aeabi_uldivmod>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4613      	mov	r3, r2
 80019ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019bc:	e058      	b.n	8001a70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019be:	4b38      	ldr	r3, [pc, #224]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	099b      	lsrs	r3, r3, #6
 80019c4:	2200      	movs	r2, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	4611      	mov	r1, r2
 80019ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019ce:	623b      	str	r3, [r7, #32]
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019d8:	4642      	mov	r2, r8
 80019da:	464b      	mov	r3, r9
 80019dc:	f04f 0000 	mov.w	r0, #0
 80019e0:	f04f 0100 	mov.w	r1, #0
 80019e4:	0159      	lsls	r1, r3, #5
 80019e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ea:	0150      	lsls	r0, r2, #5
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4641      	mov	r1, r8
 80019f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80019f6:	4649      	mov	r1, r9
 80019f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a10:	ebb2 040a 	subs.w	r4, r2, sl
 8001a14:	eb63 050b 	sbc.w	r5, r3, fp
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	00eb      	lsls	r3, r5, #3
 8001a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a26:	00e2      	lsls	r2, r4, #3
 8001a28:	4614      	mov	r4, r2
 8001a2a:	461d      	mov	r5, r3
 8001a2c:	4643      	mov	r3, r8
 8001a2e:	18e3      	adds	r3, r4, r3
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	464b      	mov	r3, r9
 8001a34:	eb45 0303 	adc.w	r3, r5, r3
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a46:	4629      	mov	r1, r5
 8001a48:	028b      	lsls	r3, r1, #10
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a50:	4621      	mov	r1, r4
 8001a52:	028a      	lsls	r2, r1, #10
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
 8001a5e:	61fa      	str	r2, [r7, #28]
 8001a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a64:	f7fe fbb4 	bl	80001d0 <__aeabi_uldivmod>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a70:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	0c1b      	lsrs	r3, r3, #16
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001a80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a8a:	e002      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a8c:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3750      	adds	r7, #80	@ 0x50
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	00f42400 	.word	0x00f42400
 8001aa8:	007a1200 	.word	0x007a1200

08001aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	@ (8001ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000000 	.word	0x20000000

08001ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ac8:	f7ff fff0 	bl	8001aac <HAL_RCC_GetHCLKFreq>
 8001acc:	4602      	mov	r2, r0
 8001ace:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	0a9b      	lsrs	r3, r3, #10
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	4903      	ldr	r1, [pc, #12]	@ (8001ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ada:	5ccb      	ldrb	r3, [r1, r3]
 8001adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	08004d78 	.word	0x08004d78

08001aec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	220f      	movs	r2, #15
 8001afa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001afc:	4b12      	ldr	r3, [pc, #72]	@ (8001b48 <HAL_RCC_GetClockConfig+0x5c>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 0203 	and.w	r2, r3, #3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b08:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <HAL_RCC_GetClockConfig+0x5c>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b14:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <HAL_RCC_GetClockConfig+0x5c>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b20:	4b09      	ldr	r3, [pc, #36]	@ (8001b48 <HAL_RCC_GetClockConfig+0x5c>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	08db      	lsrs	r3, r3, #3
 8001b26:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b2e:	4b07      	ldr	r3, [pc, #28]	@ (8001b4c <HAL_RCC_GetClockConfig+0x60>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0207 	and.w	r2, r3, #7
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	601a      	str	r2, [r3, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40023c00 	.word	0x40023c00

08001b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e041      	b.n	8001be6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d106      	bne.n	8001b7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f839 	bl	8001bee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3304      	adds	r3, #4
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4610      	mov	r0, r2
 8001b90:	f000 f9c0 	bl	8001f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d001      	beq.n	8001c1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e04e      	b.n	8001cba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0201 	orr.w	r2, r2, #1
 8001c32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a23      	ldr	r2, [pc, #140]	@ (8001cc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d022      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x80>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c46:	d01d      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x80>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8001ccc <HAL_TIM_Base_Start_IT+0xc8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d018      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x80>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a1e      	ldr	r2, [pc, #120]	@ (8001cd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d013      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x80>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00e      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x80>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d009      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x80>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a19      	ldr	r2, [pc, #100]	@ (8001cdc <HAL_TIM_Base_Start_IT+0xd8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d004      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x80>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a18      	ldr	r2, [pc, #96]	@ (8001ce0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d111      	bne.n	8001ca8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d010      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f042 0201 	orr.w	r2, r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca6:	e007      	b.n	8001cb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40010000 	.word	0x40010000
 8001ccc:	40000400 	.word	0x40000400
 8001cd0:	40000800 	.word	0x40000800
 8001cd4:	40000c00 	.word	0x40000c00
 8001cd8:	40010400 	.word	0x40010400
 8001cdc:	40014000 	.word	0x40014000
 8001ce0:	40001800 	.word	0x40001800

08001ce4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d020      	beq.n	8001d48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d01b      	beq.n	8001d48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0202 	mvn.w	r2, #2
 8001d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f8d2 	bl	8001ed8 <HAL_TIM_IC_CaptureCallback>
 8001d34:	e005      	b.n	8001d42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8c4 	bl	8001ec4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f8d5 	bl	8001eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d020      	beq.n	8001d94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d01b      	beq.n	8001d94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0204 	mvn.w	r2, #4
 8001d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2202      	movs	r2, #2
 8001d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f8ac 	bl	8001ed8 <HAL_TIM_IC_CaptureCallback>
 8001d80:	e005      	b.n	8001d8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f89e 	bl	8001ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f8af 	bl	8001eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d020      	beq.n	8001de0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d01b      	beq.n	8001de0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0208 	mvn.w	r2, #8
 8001db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2204      	movs	r2, #4
 8001db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f886 	bl	8001ed8 <HAL_TIM_IC_CaptureCallback>
 8001dcc:	e005      	b.n	8001dda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f878 	bl	8001ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f889 	bl	8001eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d020      	beq.n	8001e2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d01b      	beq.n	8001e2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0210 	mvn.w	r2, #16
 8001dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2208      	movs	r2, #8
 8001e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f860 	bl	8001ed8 <HAL_TIM_IC_CaptureCallback>
 8001e18:	e005      	b.n	8001e26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f852 	bl	8001ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f863 	bl	8001eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00c      	beq.n	8001e50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d007      	beq.n	8001e50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0201 	mvn.w	r2, #1
 8001e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe fd64 	bl	8000918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00c      	beq.n	8001e74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d007      	beq.n	8001e74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f906 	bl	8002080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00c      	beq.n	8001e98 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d007      	beq.n	8001e98 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f834 	bl	8001f00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f003 0320 	and.w	r3, r3, #32
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00c      	beq.n	8001ebc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f003 0320 	and.w	r3, r3, #32
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d007      	beq.n	8001ebc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0220 	mvn.w	r2, #32
 8001eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f8d8 	bl	800206c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a46      	ldr	r2, [pc, #280]	@ (8002040 <TIM_Base_SetConfig+0x12c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d013      	beq.n	8001f54 <TIM_Base_SetConfig+0x40>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f32:	d00f      	beq.n	8001f54 <TIM_Base_SetConfig+0x40>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a43      	ldr	r2, [pc, #268]	@ (8002044 <TIM_Base_SetConfig+0x130>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d00b      	beq.n	8001f54 <TIM_Base_SetConfig+0x40>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a42      	ldr	r2, [pc, #264]	@ (8002048 <TIM_Base_SetConfig+0x134>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d007      	beq.n	8001f54 <TIM_Base_SetConfig+0x40>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a41      	ldr	r2, [pc, #260]	@ (800204c <TIM_Base_SetConfig+0x138>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d003      	beq.n	8001f54 <TIM_Base_SetConfig+0x40>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a40      	ldr	r2, [pc, #256]	@ (8002050 <TIM_Base_SetConfig+0x13c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d108      	bne.n	8001f66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a35      	ldr	r2, [pc, #212]	@ (8002040 <TIM_Base_SetConfig+0x12c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d02b      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f74:	d027      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a32      	ldr	r2, [pc, #200]	@ (8002044 <TIM_Base_SetConfig+0x130>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d023      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a31      	ldr	r2, [pc, #196]	@ (8002048 <TIM_Base_SetConfig+0x134>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d01f      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a30      	ldr	r2, [pc, #192]	@ (800204c <TIM_Base_SetConfig+0x138>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01b      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a2f      	ldr	r2, [pc, #188]	@ (8002050 <TIM_Base_SetConfig+0x13c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d017      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a2e      	ldr	r2, [pc, #184]	@ (8002054 <TIM_Base_SetConfig+0x140>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a2d      	ldr	r2, [pc, #180]	@ (8002058 <TIM_Base_SetConfig+0x144>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00f      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a2c      	ldr	r2, [pc, #176]	@ (800205c <TIM_Base_SetConfig+0x148>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00b      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a2b      	ldr	r2, [pc, #172]	@ (8002060 <TIM_Base_SetConfig+0x14c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d007      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a2a      	ldr	r2, [pc, #168]	@ (8002064 <TIM_Base_SetConfig+0x150>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d003      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a29      	ldr	r2, [pc, #164]	@ (8002068 <TIM_Base_SetConfig+0x154>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d108      	bne.n	8001fd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a10      	ldr	r2, [pc, #64]	@ (8002040 <TIM_Base_SetConfig+0x12c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d003      	beq.n	800200c <TIM_Base_SetConfig+0xf8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a12      	ldr	r2, [pc, #72]	@ (8002050 <TIM_Base_SetConfig+0x13c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d103      	bne.n	8002014 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d105      	bne.n	8002032 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f023 0201 	bic.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	611a      	str	r2, [r3, #16]
  }
}
 8002032:	bf00      	nop
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40010000 	.word	0x40010000
 8002044:	40000400 	.word	0x40000400
 8002048:	40000800 	.word	0x40000800
 800204c:	40000c00 	.word	0x40000c00
 8002050:	40010400 	.word	0x40010400
 8002054:	40014000 	.word	0x40014000
 8002058:	40014400 	.word	0x40014400
 800205c:	40014800 	.word	0x40014800
 8002060:	40001800 	.word	0x40001800
 8002064:	40001c00 	.word	0x40001c00
 8002068:	40002000 	.word	0x40002000

0800206c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f103 0208 	add.w	r2, r3, #8
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ac:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f103 0208 	add.w	r2, r3, #8
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f103 0208 	add.w	r2, r3, #8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80020ee:	b480      	push	{r7}
 80020f0:	b085      	sub	sp, #20
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002104:	d103      	bne.n	800210e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	e00c      	b.n	8002128 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3308      	adds	r3, #8
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	e002      	b.n	800211c <vListInsert+0x2e>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	429a      	cmp	r2, r3
 8002126:	d2f6      	bcs.n	8002116 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	601a      	str	r2, [r3, #0]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6892      	ldr	r2, [r2, #8]
 8002176:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6852      	ldr	r2, [r2, #4]
 8002180:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	429a      	cmp	r2, r3
 800218a:	d103      	bne.n	8002194 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	1e5a      	subs	r2, r3, #1
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80021be:	2301      	movs	r3, #1
 80021c0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10b      	bne.n	80021e4 <xQueueGenericReset+0x30>
        __asm volatile
 80021cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021d0:	f383 8811 	msr	BASEPRI, r3
 80021d4:	f3bf 8f6f 	isb	sy
 80021d8:	f3bf 8f4f 	dsb	sy
 80021dc:	60fb      	str	r3, [r7, #12]
    }
 80021de:	bf00      	nop
 80021e0:	bf00      	nop
 80021e2:	e7fd      	b.n	80021e0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d05d      	beq.n	80022a6 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d059      	beq.n	80022a6 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021fa:	2100      	movs	r1, #0
 80021fc:	fba3 2302 	umull	r2, r3, r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d000      	beq.n	8002206 <xQueueGenericReset+0x52>
 8002204:	2101      	movs	r1, #1
 8002206:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002208:	2b00      	cmp	r3, #0
 800220a:	d14c      	bne.n	80022a6 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 800220c:	f001 fdf6 	bl	8003dfc <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002218:	6939      	ldr	r1, [r7, #16]
 800221a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	441a      	add	r2, r3
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	2200      	movs	r2, #0
 800222a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800223c:	3b01      	subs	r3, #1
 800223e:	6939      	ldr	r1, [r7, #16]
 8002240:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	441a      	add	r2, r3
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	22ff      	movs	r2, #255	@ 0xff
 8002250:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	22ff      	movs	r2, #255	@ 0xff
 8002258:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d114      	bne.n	800228c <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d01a      	beq.n	80022a0 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	3310      	adds	r3, #16
 800226e:	4618      	mov	r0, r3
 8002270:	f000 ff50 	bl	8003114 <xTaskRemoveFromEventList>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d012      	beq.n	80022a0 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800227a:	4b16      	ldr	r3, [pc, #88]	@ (80022d4 <xQueueGenericReset+0x120>)
 800227c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	f3bf 8f4f 	dsb	sy
 8002286:	f3bf 8f6f 	isb	sy
 800228a:	e009      	b.n	80022a0 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	3310      	adds	r3, #16
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff feff 	bl	8002094 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	3324      	adds	r3, #36	@ 0x24
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fefa 	bl	8002094 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80022a0:	f001 fdde 	bl	8003e60 <vPortExitCritical>
 80022a4:	e001      	b.n	80022aa <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10b      	bne.n	80022c8 <xQueueGenericReset+0x114>
        __asm volatile
 80022b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022b4:	f383 8811 	msr	BASEPRI, r3
 80022b8:	f3bf 8f6f 	isb	sy
 80022bc:	f3bf 8f4f 	dsb	sy
 80022c0:	60bb      	str	r3, [r7, #8]
    }
 80022c2:	bf00      	nop
 80022c4:	bf00      	nop
 80022c6:	e7fd      	b.n	80022c4 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80022c8:	697b      	ldr	r3, [r7, #20]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	e000ed04 	.word	0xe000ed04

080022d8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	@ 0x28
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	4613      	mov	r3, r2
 80022e4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d02e      	beq.n	800234e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80022f0:	2100      	movs	r1, #0
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	fba3 2302 	umull	r2, r3, r3, r2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d000      	beq.n	8002300 <xQueueGenericCreate+0x28>
 80022fe:	2101      	movs	r1, #1
 8002300:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002302:	2b00      	cmp	r3, #0
 8002304:	d123      	bne.n	800234e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800230e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002312:	d81c      	bhi.n	800234e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	fb02 f303 	mul.w	r3, r2, r3
 800231c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	3350      	adds	r3, #80	@ 0x50
 8002322:	4618      	mov	r0, r3
 8002324:	f001 fe52 	bl	8003fcc <pvPortMalloc>
 8002328:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d01d      	beq.n	800236c <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3350      	adds	r3, #80	@ 0x50
 8002338:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800233a:	79fa      	ldrb	r2, [r7, #7]
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	4613      	mov	r3, r2
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 f815 	bl	8002376 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800234c:	e00e      	b.n	800236c <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10b      	bne.n	800236c <xQueueGenericCreate+0x94>
        __asm volatile
 8002354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002358:	f383 8811 	msr	BASEPRI, r3
 800235c:	f3bf 8f6f 	isb	sy
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	613b      	str	r3, [r7, #16]
    }
 8002366:	bf00      	nop
 8002368:	bf00      	nop
 800236a:	e7fd      	b.n	8002368 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800236c:	69fb      	ldr	r3, [r7, #28]
    }
 800236e:	4618      	mov	r0, r3
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d103      	bne.n	8002392 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	e002      	b.n	8002398 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023a4:	2101      	movs	r1, #1
 80023a6:	69b8      	ldr	r0, [r7, #24]
 80023a8:	f7ff ff04 	bl	80021b4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	78fa      	ldrb	r2, [r7, #3]
 80023b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08c      	sub	sp, #48	@ 0x30
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80023d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10b      	bne.n	80023ee <xQueueReceive+0x32>
        __asm volatile
 80023d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023da:	f383 8811 	msr	BASEPRI, r3
 80023de:	f3bf 8f6f 	isb	sy
 80023e2:	f3bf 8f4f 	dsb	sy
 80023e6:	623b      	str	r3, [r7, #32]
    }
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	e7fd      	b.n	80023ea <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d103      	bne.n	80023fc <xQueueReceive+0x40>
 80023f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <xQueueReceive+0x44>
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <xQueueReceive+0x46>
 8002400:	2300      	movs	r3, #0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10b      	bne.n	800241e <xQueueReceive+0x62>
        __asm volatile
 8002406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800240a:	f383 8811 	msr	BASEPRI, r3
 800240e:	f3bf 8f6f 	isb	sy
 8002412:	f3bf 8f4f 	dsb	sy
 8002416:	61fb      	str	r3, [r7, #28]
    }
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	e7fd      	b.n	800241a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800241e:	f001 f88d 	bl	800353c <xTaskGetSchedulerState>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <xQueueReceive+0x72>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <xQueueReceive+0x76>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <xQueueReceive+0x78>
 8002432:	2300      	movs	r3, #0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10b      	bne.n	8002450 <xQueueReceive+0x94>
        __asm volatile
 8002438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800243c:	f383 8811 	msr	BASEPRI, r3
 8002440:	f3bf 8f6f 	isb	sy
 8002444:	f3bf 8f4f 	dsb	sy
 8002448:	61bb      	str	r3, [r7, #24]
    }
 800244a:	bf00      	nop
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002450:	f001 fcd4 	bl	8003dfc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	2b00      	cmp	r3, #0
 800245e:	d01f      	beq.n	80024a0 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002464:	f000 f88c 	bl	8002580 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246a:	1e5a      	subs	r2, r3, #1
 800246c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00f      	beq.n	8002498 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247a:	3310      	adds	r3, #16
 800247c:	4618      	mov	r0, r3
 800247e:	f000 fe49 	bl	8003114 <xTaskRemoveFromEventList>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002488:	4b3c      	ldr	r3, [pc, #240]	@ (800257c <xQueueReceive+0x1c0>)
 800248a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	f3bf 8f4f 	dsb	sy
 8002494:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002498:	f001 fce2 	bl	8003e60 <vPortExitCritical>
                return pdPASS;
 800249c:	2301      	movs	r3, #1
 800249e:	e069      	b.n	8002574 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d103      	bne.n	80024ae <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80024a6:	f001 fcdb 	bl	8003e60 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e062      	b.n	8002574 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80024ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d106      	bne.n	80024c2 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80024b4:	f107 0310 	add.w	r3, r7, #16
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 ff03 	bl	80032c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80024be:	2301      	movs	r3, #1
 80024c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80024c2:	f001 fccd 	bl	8003e60 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80024c6:	f000 fb2b 	bl	8002b20 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80024ca:	f001 fc97 	bl	8003dfc <vPortEnterCritical>
 80024ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80024d4:	b25b      	sxtb	r3, r3
 80024d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024da:	d103      	bne.n	80024e4 <xQueueReceive+0x128>
 80024dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80024ea:	b25b      	sxtb	r3, r3
 80024ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f0:	d103      	bne.n	80024fa <xQueueReceive+0x13e>
 80024f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80024fa:	f001 fcb1 	bl	8003e60 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024fe:	1d3a      	adds	r2, r7, #4
 8002500:	f107 0310 	add.w	r3, r7, #16
 8002504:	4611      	mov	r1, r2
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fef2 	bl	80032f0 <xTaskCheckForTimeOut>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d123      	bne.n	800255a <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002512:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002514:	f000 f8ac 	bl	8002670 <prvIsQueueEmpty>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d017      	beq.n	800254e <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800251e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002520:	3324      	adds	r3, #36	@ 0x24
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	4611      	mov	r1, r2
 8002526:	4618      	mov	r0, r3
 8002528:	f000 fd88 	bl	800303c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800252c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800252e:	f000 f84d 	bl	80025cc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002532:	f000 fb03 	bl	8002b3c <xTaskResumeAll>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d189      	bne.n	8002450 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 800253c:	4b0f      	ldr	r3, [pc, #60]	@ (800257c <xQueueReceive+0x1c0>)
 800253e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	f3bf 8f6f 	isb	sy
 800254c:	e780      	b.n	8002450 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800254e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002550:	f000 f83c 	bl	80025cc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002554:	f000 faf2 	bl	8002b3c <xTaskResumeAll>
 8002558:	e77a      	b.n	8002450 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800255a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800255c:	f000 f836 	bl	80025cc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002560:	f000 faec 	bl	8002b3c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002564:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002566:	f000 f883 	bl	8002670 <prvIsQueueEmpty>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	f43f af6f 	beq.w	8002450 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002572:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002574:	4618      	mov	r0, r3
 8002576:	3730      	adds	r7, #48	@ 0x30
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	e000ed04 	.word	0xe000ed04

08002580 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	2b00      	cmp	r3, #0
 8002590:	d018      	beq.n	80025c4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	441a      	add	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d303      	bcc.n	80025b4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68d9      	ldr	r1, [r3, #12]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025bc:	461a      	mov	r2, r3
 80025be:	6838      	ldr	r0, [r7, #0]
 80025c0:	f002 f941 	bl	8004846 <memcpy>
    }
}
 80025c4:	bf00      	nop
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80025d4:	f001 fc12 	bl	8003dfc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025de:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80025e0:	e011      	b.n	8002606 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d012      	beq.n	8002610 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3324      	adds	r3, #36	@ 0x24
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 fd90 	bl	8003114 <xTaskRemoveFromEventList>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80025fa:	f000 fee1 	bl	80033c0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	3b01      	subs	r3, #1
 8002602:	b2db      	uxtb	r3, r3
 8002604:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260a:	2b00      	cmp	r3, #0
 800260c:	dce9      	bgt.n	80025e2 <prvUnlockQueue+0x16>
 800260e:	e000      	b.n	8002612 <prvUnlockQueue+0x46>
                    break;
 8002610:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	22ff      	movs	r2, #255	@ 0xff
 8002616:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800261a:	f001 fc21 	bl	8003e60 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800261e:	f001 fbed 	bl	8003dfc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002628:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800262a:	e011      	b.n	8002650 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d012      	beq.n	800265a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3310      	adds	r3, #16
 8002638:	4618      	mov	r0, r3
 800263a:	f000 fd6b 	bl	8003114 <xTaskRemoveFromEventList>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002644:	f000 febc 	bl	80033c0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002648:	7bbb      	ldrb	r3, [r7, #14]
 800264a:	3b01      	subs	r3, #1
 800264c:	b2db      	uxtb	r3, r3
 800264e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002654:	2b00      	cmp	r3, #0
 8002656:	dce9      	bgt.n	800262c <prvUnlockQueue+0x60>
 8002658:	e000      	b.n	800265c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800265a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	22ff      	movs	r2, #255	@ 0xff
 8002660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002664:	f001 fbfc 	bl	8003e60 <vPortExitCritical>
}
 8002668:	bf00      	nop
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002678:	f001 fbc0 	bl	8003dfc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002680:	2b00      	cmp	r3, #0
 8002682:	d102      	bne.n	800268a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002684:	2301      	movs	r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	e001      	b.n	800268e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800268e:	f001 fbe7 	bl	8003e60 <vPortExitCritical>

    return xReturn;
 8002692:	68fb      	ldr	r3, [r7, #12]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10b      	bne.n	80026c8 <vQueueAddToRegistry+0x2c>
        __asm volatile
 80026b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026b4:	f383 8811 	msr	BASEPRI, r3
 80026b8:	f3bf 8f6f 	isb	sy
 80026bc:	f3bf 8f4f 	dsb	sy
 80026c0:	60fb      	str	r3, [r7, #12]
    }
 80026c2:	bf00      	nop
 80026c4:	bf00      	nop
 80026c6:	e7fd      	b.n	80026c4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d024      	beq.n	8002718 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	e01e      	b.n	8002712 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80026d4:	4a18      	ldr	r2, [pc, #96]	@ (8002738 <vQueueAddToRegistry+0x9c>)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4413      	add	r3, r2
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d105      	bne.n	80026f0 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4a13      	ldr	r2, [pc, #76]	@ (8002738 <vQueueAddToRegistry+0x9c>)
 80026ea:	4413      	add	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
                    break;
 80026ee:	e013      	b.n	8002718 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10a      	bne.n	800270c <vQueueAddToRegistry+0x70>
 80026f6:	4a10      	ldr	r2, [pc, #64]	@ (8002738 <vQueueAddToRegistry+0x9c>)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d104      	bne.n	800270c <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4a0c      	ldr	r2, [pc, #48]	@ (8002738 <vQueueAddToRegistry+0x9c>)
 8002708:	4413      	add	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	3301      	adds	r3, #1
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b07      	cmp	r3, #7
 8002716:	d9dd      	bls.n	80026d4 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d005      	beq.n	800272a <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800272a:	bf00      	nop
 800272c:	371c      	adds	r7, #28
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	200000d8 	.word	0x200000d8

0800273c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800274c:	f001 fb56 	bl	8003dfc <vPortEnterCritical>
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002756:	b25b      	sxtb	r3, r3
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d103      	bne.n	8002766 <vQueueWaitForMessageRestricted+0x2a>
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800276c:	b25b      	sxtb	r3, r3
 800276e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002772:	d103      	bne.n	800277c <vQueueWaitForMessageRestricted+0x40>
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800277c:	f001 fb70 	bl	8003e60 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002784:	2b00      	cmp	r3, #0
 8002786:	d106      	bne.n	8002796 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	3324      	adds	r3, #36	@ 0x24
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fc79 	bl	8003088 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002796:	6978      	ldr	r0, [r7, #20]
 8002798:	f7ff ff18 	bl	80025cc <prvUnlockQueue>
    }
 800279c:	bf00      	nop
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08c      	sub	sp, #48	@ 0x30
 80027a8:	af04      	add	r7, sp, #16
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	4613      	mov	r3, r2
 80027b2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f001 fc07 	bl	8003fcc <pvPortMalloc>
 80027be:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d013      	beq.n	80027ee <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80027c6:	2058      	movs	r0, #88	@ 0x58
 80027c8:	f001 fc00 	bl	8003fcc <pvPortMalloc>
 80027cc:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80027d4:	2258      	movs	r2, #88	@ 0x58
 80027d6:	2100      	movs	r1, #0
 80027d8:	69f8      	ldr	r0, [r7, #28]
 80027da:	f001 ffbf 	bl	800475c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80027e4:	e005      	b.n	80027f2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80027e6:	6978      	ldr	r0, [r7, #20]
 80027e8:	f001 fcac 	bl	8004144 <vPortFree>
 80027ec:	e001      	b.n	80027f2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027f8:	88fa      	ldrh	r2, [r7, #6]
 80027fa:	2300      	movs	r3, #0
 80027fc:	9303      	str	r3, [sp, #12]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	9302      	str	r3, [sp, #8]
 8002802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f80e 	bl	8002830 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002814:	69f8      	ldr	r0, [r7, #28]
 8002816:	f000 f89b 	bl	8002950 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800281a:	2301      	movs	r3, #1
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	e002      	b.n	8002826 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002820:	f04f 33ff 	mov.w	r3, #4294967295
 8002824:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002826:	69bb      	ldr	r3, [r7, #24]
    }
 8002828:	4618      	mov	r0, r3
 800282a:	3720      	adds	r7, #32
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800283e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002840:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	461a      	mov	r2, r3
 8002848:	21a5      	movs	r1, #165	@ 0xa5
 800284a:	f001 ff87 	bl	800475c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800284e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002850:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002858:	3b01      	subs	r3, #1
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	f023 0307 	bic.w	r3, r3, #7
 8002866:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00b      	beq.n	800288a <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002876:	f383 8811 	msr	BASEPRI, r3
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	617b      	str	r3, [r7, #20]
    }
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	e7fd      	b.n	8002886 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d01e      	beq.n	80028ce <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002890:	2300      	movs	r3, #0
 8002892:	61fb      	str	r3, [r7, #28]
 8002894:	e012      	b.n	80028bc <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	4413      	add	r3, r2
 800289c:	7819      	ldrb	r1, [r3, #0]
 800289e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	4413      	add	r3, r2
 80028a4:	3334      	adds	r3, #52	@ 0x34
 80028a6:	460a      	mov	r2, r1
 80028a8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	4413      	add	r3, r2
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d006      	beq.n	80028c4 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3301      	adds	r3, #1
 80028ba:	61fb      	str	r3, [r7, #28]
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	2b09      	cmp	r3, #9
 80028c0:	d9e9      	bls.n	8002896 <prvInitialiseNewTask+0x66>
 80028c2:	e000      	b.n	80028c6 <prvInitialiseNewTask+0x96>
            {
                break;
 80028c4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80028ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d90b      	bls.n	80028ec <prvInitialiseNewTask+0xbc>
        __asm volatile
 80028d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d8:	f383 8811 	msr	BASEPRI, r3
 80028dc:	f3bf 8f6f 	isb	sy
 80028e0:	f3bf 8f4f 	dsb	sy
 80028e4:	613b      	str	r3, [r7, #16]
    }
 80028e6:	bf00      	nop
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d901      	bls.n	80028f6 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028f2:	2304      	movs	r3, #4
 80028f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80028f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80028fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002900:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002904:	3304      	adds	r3, #4
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fbe4 	bl	80020d4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800290c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290e:	3318      	adds	r3, #24
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fbdf 	bl	80020d4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002918:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800291a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800291c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291e:	f1c3 0205 	rsb	r2, r3, #5
 8002922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002924:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800292a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	68f9      	ldr	r1, [r7, #12]
 8002930:	69b8      	ldr	r0, [r7, #24]
 8002932:	f001 f92d 	bl	8003b90 <pxPortInitialiseStack>
 8002936:	4602      	mov	r2, r0
 8002938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800293c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002946:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002948:	bf00      	nop
 800294a:	3720      	adds	r7, #32
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002958:	f001 fa50 	bl	8003dfc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800295c:	4b40      	ldr	r3, [pc, #256]	@ (8002a60 <prvAddNewTaskToReadyList+0x110>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	3301      	adds	r3, #1
 8002962:	4a3f      	ldr	r2, [pc, #252]	@ (8002a60 <prvAddNewTaskToReadyList+0x110>)
 8002964:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002966:	4b3f      	ldr	r3, [pc, #252]	@ (8002a64 <prvAddNewTaskToReadyList+0x114>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d109      	bne.n	8002982 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800296e:	4a3d      	ldr	r2, [pc, #244]	@ (8002a64 <prvAddNewTaskToReadyList+0x114>)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002974:	4b3a      	ldr	r3, [pc, #232]	@ (8002a60 <prvAddNewTaskToReadyList+0x110>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d110      	bne.n	800299e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800297c:	f000 fd44 	bl	8003408 <prvInitialiseTaskLists>
 8002980:	e00d      	b.n	800299e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002982:	4b39      	ldr	r3, [pc, #228]	@ (8002a68 <prvAddNewTaskToReadyList+0x118>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800298a:	4b36      	ldr	r3, [pc, #216]	@ (8002a64 <prvAddNewTaskToReadyList+0x114>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002994:	429a      	cmp	r2, r3
 8002996:	d802      	bhi.n	800299e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002998:	4a32      	ldr	r2, [pc, #200]	@ (8002a64 <prvAddNewTaskToReadyList+0x114>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800299e:	4b33      	ldr	r3, [pc, #204]	@ (8002a6c <prvAddNewTaskToReadyList+0x11c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	3301      	adds	r3, #1
 80029a4:	4a31      	ldr	r2, [pc, #196]	@ (8002a6c <prvAddNewTaskToReadyList+0x11c>)
 80029a6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029a8:	4b30      	ldr	r3, [pc, #192]	@ (8002a6c <prvAddNewTaskToReadyList+0x11c>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b4:	2201      	movs	r2, #1
 80029b6:	409a      	lsls	r2, r3
 80029b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002a70 <prvAddNewTaskToReadyList+0x120>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4313      	orrs	r3, r2
 80029be:	4a2c      	ldr	r2, [pc, #176]	@ (8002a70 <prvAddNewTaskToReadyList+0x120>)
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029c6:	492b      	ldr	r1, [pc, #172]	@ (8002a74 <prvAddNewTaskToReadyList+0x124>)
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	3304      	adds	r3, #4
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	609a      	str	r2, [r3, #8]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	3204      	adds	r2, #4
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	1d1a      	adds	r2, r3, #4
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4a1b      	ldr	r2, [pc, #108]	@ (8002a74 <prvAddNewTaskToReadyList+0x124>)
 8002a06:	441a      	add	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	615a      	str	r2, [r3, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a10:	4918      	ldr	r1, [pc, #96]	@ (8002a74 <prvAddNewTaskToReadyList+0x124>)
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	1c59      	adds	r1, r3, #1
 8002a20:	4814      	ldr	r0, [pc, #80]	@ (8002a74 <prvAddNewTaskToReadyList+0x124>)
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4403      	add	r3, r0
 8002a2c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002a2e:	f001 fa17 	bl	8003e60 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002a32:	4b0d      	ldr	r3, [pc, #52]	@ (8002a68 <prvAddNewTaskToReadyList+0x118>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00e      	beq.n	8002a58 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a64 <prvAddNewTaskToReadyList+0x114>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d207      	bcs.n	8002a58 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002a48:	4b0b      	ldr	r3, [pc, #44]	@ (8002a78 <prvAddNewTaskToReadyList+0x128>)
 8002a4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	f3bf 8f4f 	dsb	sy
 8002a54:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	200001f0 	.word	0x200001f0
 8002a64:	20000118 	.word	0x20000118
 8002a68:	200001fc 	.word	0x200001fc
 8002a6c:	2000020c 	.word	0x2000020c
 8002a70:	200001f8 	.word	0x200001f8
 8002a74:	2000011c 	.word	0x2000011c
 8002a78:	e000ed04 	.word	0xe000ed04

08002a7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002a82:	4b20      	ldr	r3, [pc, #128]	@ (8002b04 <vTaskStartScheduler+0x88>)
 8002a84:	9301      	str	r3, [sp, #4]
 8002a86:	2300      	movs	r3, #0
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	2282      	movs	r2, #130	@ 0x82
 8002a8e:	491e      	ldr	r1, [pc, #120]	@ (8002b08 <vTaskStartScheduler+0x8c>)
 8002a90:	481e      	ldr	r0, [pc, #120]	@ (8002b0c <vTaskStartScheduler+0x90>)
 8002a92:	f7ff fe87 	bl	80027a4 <xTaskCreate>
 8002a96:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d102      	bne.n	8002aa4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002a9e:	f000 fdeb 	bl	8003678 <xTimerCreateTimerTask>
 8002aa2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d116      	bne.n	8002ad8 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aae:	f383 8811 	msr	BASEPRI, r3
 8002ab2:	f3bf 8f6f 	isb	sy
 8002ab6:	f3bf 8f4f 	dsb	sy
 8002aba:	60bb      	str	r3, [r7, #8]
    }
 8002abc:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002abe:	4b14      	ldr	r3, [pc, #80]	@ (8002b10 <vTaskStartScheduler+0x94>)
 8002ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002ac6:	4b13      	ldr	r3, [pc, #76]	@ (8002b14 <vTaskStartScheduler+0x98>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002acc:	4b12      	ldr	r3, [pc, #72]	@ (8002b18 <vTaskStartScheduler+0x9c>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002ad2:	f001 f8ef 	bl	8003cb4 <xPortStartScheduler>
 8002ad6:	e00f      	b.n	8002af8 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ade:	d10b      	bne.n	8002af8 <vTaskStartScheduler+0x7c>
        __asm volatile
 8002ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ae4:	f383 8811 	msr	BASEPRI, r3
 8002ae8:	f3bf 8f6f 	isb	sy
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	607b      	str	r3, [r7, #4]
    }
 8002af2:	bf00      	nop
 8002af4:	bf00      	nop
 8002af6:	e7fd      	b.n	8002af4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002af8:	4b08      	ldr	r3, [pc, #32]	@ (8002b1c <vTaskStartScheduler+0xa0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
}
 8002afc:	bf00      	nop
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000214 	.word	0x20000214
 8002b08:	08004d50 	.word	0x08004d50
 8002b0c:	080033d9 	.word	0x080033d9
 8002b10:	20000210 	.word	0x20000210
 8002b14:	200001fc 	.word	0x200001fc
 8002b18:	200001f4 	.word	0x200001f4
 8002b1c:	2000000c 	.word	0x2000000c

08002b20 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002b24:	4b04      	ldr	r3, [pc, #16]	@ (8002b38 <vTaskSuspendAll+0x18>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	4a03      	ldr	r2, [pc, #12]	@ (8002b38 <vTaskSuspendAll+0x18>)
 8002b2c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002b2e:	bf00      	nop
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	20000218 	.word	0x20000218

08002b3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002b4a:	4b71      	ldr	r3, [pc, #452]	@ (8002d10 <xTaskResumeAll+0x1d4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10b      	bne.n	8002b6a <xTaskResumeAll+0x2e>
        __asm volatile
 8002b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b56:	f383 8811 	msr	BASEPRI, r3
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	607b      	str	r3, [r7, #4]
    }
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop
 8002b68:	e7fd      	b.n	8002b66 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002b6a:	f001 f947 	bl	8003dfc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002b6e:	4b68      	ldr	r3, [pc, #416]	@ (8002d10 <xTaskResumeAll+0x1d4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	4a66      	ldr	r2, [pc, #408]	@ (8002d10 <xTaskResumeAll+0x1d4>)
 8002b76:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b78:	4b65      	ldr	r3, [pc, #404]	@ (8002d10 <xTaskResumeAll+0x1d4>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f040 80c0 	bne.w	8002d02 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b82:	4b64      	ldr	r3, [pc, #400]	@ (8002d14 <xTaskResumeAll+0x1d8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 80bb 	beq.w	8002d02 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b8c:	e08a      	b.n	8002ca4 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b8e:	4b62      	ldr	r3, [pc, #392]	@ (8002d18 <xTaskResumeAll+0x1dc>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	6a12      	ldr	r2, [r2, #32]
 8002ba4:	609a      	str	r2, [r3, #8]
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	69fa      	ldr	r2, [r7, #28]
 8002bac:	69d2      	ldr	r2, [r2, #28]
 8002bae:	605a      	str	r2, [r3, #4]
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	3318      	adds	r3, #24
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d103      	bne.n	8002bc4 <xTaskResumeAll+0x88>
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	6a1a      	ldr	r2, [r3, #32]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	1e5a      	subs	r2, r3, #1
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	69fa      	ldr	r2, [r7, #28]
 8002be0:	68d2      	ldr	r2, [r2, #12]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	69fa      	ldr	r2, [r7, #28]
 8002bea:	6892      	ldr	r2, [r2, #8]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d103      	bne.n	8002c02 <xTaskResumeAll+0xc6>
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	2200      	movs	r2, #0
 8002c06:	615a      	str	r2, [r3, #20]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	1e5a      	subs	r2, r3, #1
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c16:	2201      	movs	r2, #1
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	4b40      	ldr	r3, [pc, #256]	@ (8002d1c <xTaskResumeAll+0x1e0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	4a3e      	ldr	r2, [pc, #248]	@ (8002d1c <xTaskResumeAll+0x1e0>)
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c28:	493d      	ldr	r1, [pc, #244]	@ (8002d20 <xTaskResumeAll+0x1e4>)
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	3304      	adds	r3, #4
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	60da      	str	r2, [r3, #12]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	3204      	adds	r2, #4
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	1d1a      	adds	r2, r3, #4
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	609a      	str	r2, [r3, #8]
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4a2e      	ldr	r2, [pc, #184]	@ (8002d20 <xTaskResumeAll+0x1e4>)
 8002c68:	441a      	add	r2, r3
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	615a      	str	r2, [r3, #20]
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c72:	492b      	ldr	r1, [pc, #172]	@ (8002d20 <xTaskResumeAll+0x1e4>)
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	1c59      	adds	r1, r3, #1
 8002c82:	4827      	ldr	r0, [pc, #156]	@ (8002d20 <xTaskResumeAll+0x1e4>)
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4403      	add	r3, r0
 8002c8e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c94:	4b23      	ldr	r3, [pc, #140]	@ (8002d24 <xTaskResumeAll+0x1e8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d302      	bcc.n	8002ca4 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8002c9e:	4b22      	ldr	r3, [pc, #136]	@ (8002d28 <xTaskResumeAll+0x1ec>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d18 <xTaskResumeAll+0x1dc>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f47f af70 	bne.w	8002b8e <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002cb4:	f000 fc26 	bl	8003504 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d2c <xTaskResumeAll+0x1f0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d010      	beq.n	8002ce6 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002cc4:	f000 f846 	bl	8002d54 <xTaskIncrementTick>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8002cce:	4b16      	ldr	r3, [pc, #88]	@ (8002d28 <xTaskResumeAll+0x1ec>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f1      	bne.n	8002cc4 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8002ce0:	4b12      	ldr	r3, [pc, #72]	@ (8002d2c <xTaskResumeAll+0x1f0>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ce6:	4b10      	ldr	r3, [pc, #64]	@ (8002d28 <xTaskResumeAll+0x1ec>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8002d30 <xTaskResumeAll+0x1f4>)
 8002cf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002d02:	f001 f8ad 	bl	8003e60 <vPortExitCritical>

    return xAlreadyYielded;
 8002d06:	69bb      	ldr	r3, [r7, #24]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3720      	adds	r7, #32
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20000218 	.word	0x20000218
 8002d14:	200001f0 	.word	0x200001f0
 8002d18:	200001b0 	.word	0x200001b0
 8002d1c:	200001f8 	.word	0x200001f8
 8002d20:	2000011c 	.word	0x2000011c
 8002d24:	20000118 	.word	0x20000118
 8002d28:	20000204 	.word	0x20000204
 8002d2c:	20000200 	.word	0x20000200
 8002d30:	e000ed04 	.word	0xe000ed04

08002d34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002d3a:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <xTaskGetTickCount+0x1c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002d40:	687b      	ldr	r3, [r7, #4]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	200001f4 	.word	0x200001f4

08002d54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08a      	sub	sp, #40	@ 0x28
 8002d58:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d5e:	4b7e      	ldr	r3, [pc, #504]	@ (8002f58 <xTaskIncrementTick+0x204>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f040 80ed 	bne.w	8002f42 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d68:	4b7c      	ldr	r3, [pc, #496]	@ (8002f5c <xTaskIncrementTick+0x208>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d70:	4a7a      	ldr	r2, [pc, #488]	@ (8002f5c <xTaskIncrementTick+0x208>)
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d121      	bne.n	8002dc0 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002d7c:	4b78      	ldr	r3, [pc, #480]	@ (8002f60 <xTaskIncrementTick+0x20c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00b      	beq.n	8002d9e <xTaskIncrementTick+0x4a>
        __asm volatile
 8002d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d8a:	f383 8811 	msr	BASEPRI, r3
 8002d8e:	f3bf 8f6f 	isb	sy
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	607b      	str	r3, [r7, #4]
    }
 8002d98:	bf00      	nop
 8002d9a:	bf00      	nop
 8002d9c:	e7fd      	b.n	8002d9a <xTaskIncrementTick+0x46>
 8002d9e:	4b70      	ldr	r3, [pc, #448]	@ (8002f60 <xTaskIncrementTick+0x20c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	61fb      	str	r3, [r7, #28]
 8002da4:	4b6f      	ldr	r3, [pc, #444]	@ (8002f64 <xTaskIncrementTick+0x210>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a6d      	ldr	r2, [pc, #436]	@ (8002f60 <xTaskIncrementTick+0x20c>)
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	4a6d      	ldr	r2, [pc, #436]	@ (8002f64 <xTaskIncrementTick+0x210>)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	4b6d      	ldr	r3, [pc, #436]	@ (8002f68 <xTaskIncrementTick+0x214>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3301      	adds	r3, #1
 8002db8:	4a6b      	ldr	r2, [pc, #428]	@ (8002f68 <xTaskIncrementTick+0x214>)
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	f000 fba2 	bl	8003504 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002dc0:	4b6a      	ldr	r3, [pc, #424]	@ (8002f6c <xTaskIncrementTick+0x218>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6a3a      	ldr	r2, [r7, #32]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	f0c0 80a6 	bcc.w	8002f18 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dcc:	4b64      	ldr	r3, [pc, #400]	@ (8002f60 <xTaskIncrementTick+0x20c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d104      	bne.n	8002de0 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dd6:	4b65      	ldr	r3, [pc, #404]	@ (8002f6c <xTaskIncrementTick+0x218>)
 8002dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ddc:	601a      	str	r2, [r3, #0]
                    break;
 8002dde:	e09b      	b.n	8002f18 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002de0:	4b5f      	ldr	r3, [pc, #380]	@ (8002f60 <xTaskIncrementTick+0x20c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002df0:	6a3a      	ldr	r2, [r7, #32]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d203      	bcs.n	8002e00 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002df8:	4a5c      	ldr	r2, [pc, #368]	@ (8002f6c <xTaskIncrementTick+0x218>)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002dfe:	e08b      	b.n	8002f18 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	68d2      	ldr	r2, [r2, #12]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	6892      	ldr	r2, [r2, #8]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	3304      	adds	r3, #4
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d103      	bne.n	8002e2e <xTaskIncrementTick+0xda>
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	2200      	movs	r2, #0
 8002e32:	615a      	str	r2, [r3, #20]
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	1e5a      	subs	r2, r3, #1
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d01e      	beq.n	8002e84 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	6a12      	ldr	r2, [r2, #32]
 8002e54:	609a      	str	r2, [r3, #8]
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	69d2      	ldr	r2, [r2, #28]
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	3318      	adds	r3, #24
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d103      	bne.n	8002e74 <xTaskIncrementTick+0x120>
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	6a1a      	ldr	r2, [r3, #32]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2200      	movs	r2, #0
 8002e78:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	1e5a      	subs	r2, r3, #1
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e88:	2201      	movs	r2, #1
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	4b38      	ldr	r3, [pc, #224]	@ (8002f70 <xTaskIncrementTick+0x21c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	4a37      	ldr	r2, [pc, #220]	@ (8002f70 <xTaskIncrementTick+0x21c>)
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e9a:	4936      	ldr	r1, [pc, #216]	@ (8002f74 <xTaskIncrementTick+0x220>)
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	609a      	str	r2, [r3, #8]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	3204      	adds	r2, #4
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	1d1a      	adds	r2, r3, #4
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4a26      	ldr	r2, [pc, #152]	@ (8002f74 <xTaskIncrementTick+0x220>)
 8002eda:	441a      	add	r2, r3
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	615a      	str	r2, [r3, #20]
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ee4:	4923      	ldr	r1, [pc, #140]	@ (8002f74 <xTaskIncrementTick+0x220>)
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	1c59      	adds	r1, r3, #1
 8002ef4:	481f      	ldr	r0, [pc, #124]	@ (8002f74 <xTaskIncrementTick+0x220>)
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4403      	add	r3, r0
 8002f00:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f06:	4b1c      	ldr	r3, [pc, #112]	@ (8002f78 <xTaskIncrementTick+0x224>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	f67f af5d 	bls.w	8002dcc <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8002f12:	2301      	movs	r3, #1
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f16:	e759      	b.n	8002dcc <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f18:	4b17      	ldr	r3, [pc, #92]	@ (8002f78 <xTaskIncrementTick+0x224>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f1e:	4915      	ldr	r1, [pc, #84]	@ (8002f74 <xTaskIncrementTick+0x220>)
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d901      	bls.n	8002f34 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8002f30:	2301      	movs	r3, #1
 8002f32:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002f34:	4b11      	ldr	r3, [pc, #68]	@ (8002f7c <xTaskIncrementTick+0x228>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d007      	beq.n	8002f4c <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f40:	e004      	b.n	8002f4c <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002f42:	4b0f      	ldr	r3, [pc, #60]	@ (8002f80 <xTaskIncrementTick+0x22c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3301      	adds	r3, #1
 8002f48:	4a0d      	ldr	r2, [pc, #52]	@ (8002f80 <xTaskIncrementTick+0x22c>)
 8002f4a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3728      	adds	r7, #40	@ 0x28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000218 	.word	0x20000218
 8002f5c:	200001f4 	.word	0x200001f4
 8002f60:	200001a8 	.word	0x200001a8
 8002f64:	200001ac 	.word	0x200001ac
 8002f68:	20000208 	.word	0x20000208
 8002f6c:	20000210 	.word	0x20000210
 8002f70:	200001f8 	.word	0x200001f8
 8002f74:	2000011c 	.word	0x2000011c
 8002f78:	20000118 	.word	0x20000118
 8002f7c:	20000204 	.word	0x20000204
 8002f80:	20000200 	.word	0x20000200

08002f84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f8a:	4b27      	ldr	r3, [pc, #156]	@ (8003028 <vTaskSwitchContext+0xa4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002f92:	4b26      	ldr	r3, [pc, #152]	@ (800302c <vTaskSwitchContext+0xa8>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002f98:	e040      	b.n	800301c <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8002f9a:	4b24      	ldr	r3, [pc, #144]	@ (800302c <vTaskSwitchContext+0xa8>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fa0:	4b23      	ldr	r3, [pc, #140]	@ (8003030 <vTaskSwitchContext+0xac>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	fab3 f383 	clz	r3, r3
 8002fac:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002fae:	7afb      	ldrb	r3, [r7, #11]
 8002fb0:	f1c3 031f 	rsb	r3, r3, #31
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	491f      	ldr	r1, [pc, #124]	@ (8003034 <vTaskSwitchContext+0xb0>)
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10b      	bne.n	8002fe2 <vTaskSwitchContext+0x5e>
        __asm volatile
 8002fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	607b      	str	r3, [r7, #4]
    }
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	e7fd      	b.n	8002fde <vTaskSwitchContext+0x5a>
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4a11      	ldr	r2, [pc, #68]	@ (8003034 <vTaskSwitchContext+0xb0>)
 8002fee:	4413      	add	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	605a      	str	r2, [r3, #4]
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	3308      	adds	r3, #8
 8003004:	429a      	cmp	r2, r3
 8003006:	d104      	bne.n	8003012 <vTaskSwitchContext+0x8e>
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	4a07      	ldr	r2, [pc, #28]	@ (8003038 <vTaskSwitchContext+0xb4>)
 800301a:	6013      	str	r3, [r2, #0]
}
 800301c:	bf00      	nop
 800301e:	371c      	adds	r7, #28
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	20000218 	.word	0x20000218
 800302c:	20000204 	.word	0x20000204
 8003030:	200001f8 	.word	0x200001f8
 8003034:	2000011c 	.word	0x2000011c
 8003038:	20000118 	.word	0x20000118

0800303c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10b      	bne.n	8003064 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 800304c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	60fb      	str	r3, [r7, #12]
    }
 800305e:	bf00      	nop
 8003060:	bf00      	nop
 8003062:	e7fd      	b.n	8003060 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003064:	4b07      	ldr	r3, [pc, #28]	@ (8003084 <vTaskPlaceOnEventList+0x48>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3318      	adds	r3, #24
 800306a:	4619      	mov	r1, r3
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff f83e 	bl	80020ee <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003072:	2101      	movs	r1, #1
 8003074:	6838      	ldr	r0, [r7, #0]
 8003076:	f000 fa7f 	bl	8003578 <prvAddCurrentTaskToDelayedList>
}
 800307a:	bf00      	nop
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000118 	.word	0x20000118

08003088 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10b      	bne.n	80030b2 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800309a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800309e:	f383 8811 	msr	BASEPRI, r3
 80030a2:	f3bf 8f6f 	isb	sy
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	613b      	str	r3, [r7, #16]
    }
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	e7fd      	b.n	80030ae <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	4b15      	ldr	r3, [pc, #84]	@ (8003110 <vTaskPlaceOnEventListRestricted+0x88>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	61da      	str	r2, [r3, #28]
 80030c0:	4b13      	ldr	r3, [pc, #76]	@ (8003110 <vTaskPlaceOnEventListRestricted+0x88>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	6892      	ldr	r2, [r2, #8]
 80030c8:	621a      	str	r2, [r3, #32]
 80030ca:	4b11      	ldr	r3, [pc, #68]	@ (8003110 <vTaskPlaceOnEventListRestricted+0x88>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	3218      	adds	r2, #24
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003110 <vTaskPlaceOnEventListRestricted+0x88>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f103 0218 	add.w	r2, r3, #24
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	609a      	str	r2, [r3, #8]
 80030e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003110 <vTaskPlaceOnEventListRestricted+0x88>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80030fa:	f04f 33ff 	mov.w	r3, #4294967295
 80030fe:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	68b8      	ldr	r0, [r7, #8]
 8003104:	f000 fa38 	bl	8003578 <prvAddCurrentTaskToDelayedList>
    }
 8003108:	bf00      	nop
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000118 	.word	0x20000118

08003114 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003114:	b480      	push	{r7}
 8003116:	b08b      	sub	sp, #44	@ 0x2c
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10b      	bne.n	8003142 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800312a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800312e:	f383 8811 	msr	BASEPRI, r3
 8003132:	f3bf 8f6f 	isb	sy
 8003136:	f3bf 8f4f 	dsb	sy
 800313a:	60fb      	str	r3, [r7, #12]
    }
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	e7fd      	b.n	800313e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003146:	61fb      	str	r3, [r7, #28]
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	6a3a      	ldr	r2, [r7, #32]
 800314e:	6a12      	ldr	r2, [r2, #32]
 8003150:	609a      	str	r2, [r3, #8]
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	6a3a      	ldr	r2, [r7, #32]
 8003158:	69d2      	ldr	r2, [r2, #28]
 800315a:	605a      	str	r2, [r3, #4]
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	3318      	adds	r3, #24
 8003164:	429a      	cmp	r2, r3
 8003166:	d103      	bne.n	8003170 <xTaskRemoveFromEventList+0x5c>
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	6a1a      	ldr	r2, [r3, #32]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	605a      	str	r2, [r3, #4]
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	2200      	movs	r2, #0
 8003174:	629a      	str	r2, [r3, #40]	@ 0x28
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	1e5a      	subs	r2, r3, #1
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003180:	4b4a      	ldr	r3, [pc, #296]	@ (80032ac <xTaskRemoveFromEventList+0x198>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d15e      	bne.n	8003246 <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	6a3a      	ldr	r2, [r7, #32]
 8003194:	68d2      	ldr	r2, [r2, #12]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	6a3a      	ldr	r2, [r7, #32]
 800319e:	6892      	ldr	r2, [r2, #8]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	3304      	adds	r3, #4
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d103      	bne.n	80031b6 <xTaskRemoveFromEventList+0xa2>
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	2200      	movs	r2, #0
 80031ba:	615a      	str	r2, [r3, #20]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	1e5a      	subs	r2, r3, #1
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ca:	2201      	movs	r2, #1
 80031cc:	409a      	lsls	r2, r3
 80031ce:	4b38      	ldr	r3, [pc, #224]	@ (80032b0 <xTaskRemoveFromEventList+0x19c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	4a36      	ldr	r2, [pc, #216]	@ (80032b0 <xTaskRemoveFromEventList+0x19c>)
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031dc:	4935      	ldr	r1, [pc, #212]	@ (80032b4 <xTaskRemoveFromEventList+0x1a0>)
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	3304      	adds	r3, #4
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	60da      	str	r2, [r3, #12]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	6a3a      	ldr	r2, [r7, #32]
 8003202:	3204      	adds	r2, #4
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	1d1a      	adds	r2, r3, #4
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	609a      	str	r2, [r3, #8]
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4a26      	ldr	r2, [pc, #152]	@ (80032b4 <xTaskRemoveFromEventList+0x1a0>)
 800321c:	441a      	add	r2, r3
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	615a      	str	r2, [r3, #20]
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003226:	4923      	ldr	r1, [pc, #140]	@ (80032b4 <xTaskRemoveFromEventList+0x1a0>)
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	1c59      	adds	r1, r3, #1
 8003236:	481f      	ldr	r0, [pc, #124]	@ (80032b4 <xTaskRemoveFromEventList+0x1a0>)
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4403      	add	r3, r0
 8003242:	6019      	str	r1, [r3, #0]
 8003244:	e01b      	b.n	800327e <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003246:	4b1c      	ldr	r3, [pc, #112]	@ (80032b8 <xTaskRemoveFromEventList+0x1a4>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	61bb      	str	r3, [r7, #24]
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	61da      	str	r2, [r3, #28]
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	621a      	str	r2, [r3, #32]
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	6a3a      	ldr	r2, [r7, #32]
 8003260:	3218      	adds	r2, #24
 8003262:	605a      	str	r2, [r3, #4]
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	f103 0218 	add.w	r2, r3, #24
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	609a      	str	r2, [r3, #8]
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	4a11      	ldr	r2, [pc, #68]	@ (80032b8 <xTaskRemoveFromEventList+0x1a4>)
 8003272:	629a      	str	r2, [r3, #40]	@ 0x28
 8003274:	4b10      	ldr	r3, [pc, #64]	@ (80032b8 <xTaskRemoveFromEventList+0x1a4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3301      	adds	r3, #1
 800327a:	4a0f      	ldr	r2, [pc, #60]	@ (80032b8 <xTaskRemoveFromEventList+0x1a4>)
 800327c:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003282:	4b0e      	ldr	r3, [pc, #56]	@ (80032bc <xTaskRemoveFromEventList+0x1a8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	429a      	cmp	r2, r3
 800328a:	d905      	bls.n	8003298 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800328c:	2301      	movs	r3, #1
 800328e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003290:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <xTaskRemoveFromEventList+0x1ac>)
 8003292:	2201      	movs	r2, #1
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e001      	b.n	800329c <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8003298:	2300      	movs	r3, #0
 800329a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 800329c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800329e:	4618      	mov	r0, r3
 80032a0:	372c      	adds	r7, #44	@ 0x2c
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20000218 	.word	0x20000218
 80032b0:	200001f8 	.word	0x200001f8
 80032b4:	2000011c 	.word	0x2000011c
 80032b8:	200001b0 	.word	0x200001b0
 80032bc:	20000118 	.word	0x20000118
 80032c0:	20000204 	.word	0x20000204

080032c4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80032cc:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <vTaskInternalSetTimeOutState+0x24>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80032d4:	4b05      	ldr	r3, [pc, #20]	@ (80032ec <vTaskInternalSetTimeOutState+0x28>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	605a      	str	r2, [r3, #4]
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	20000208 	.word	0x20000208
 80032ec:	200001f4 	.word	0x200001f4

080032f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b088      	sub	sp, #32
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10b      	bne.n	8003318 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	613b      	str	r3, [r7, #16]
    }
 8003312:	bf00      	nop
 8003314:	bf00      	nop
 8003316:	e7fd      	b.n	8003314 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10b      	bne.n	8003336 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800331e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	60fb      	str	r3, [r7, #12]
    }
 8003330:	bf00      	nop
 8003332:	bf00      	nop
 8003334:	e7fd      	b.n	8003332 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003336:	f000 fd61 	bl	8003dfc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800333a:	4b1f      	ldr	r3, [pc, #124]	@ (80033b8 <xTaskCheckForTimeOut+0xc8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d102      	bne.n	800335a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]
 8003358:	e026      	b.n	80033a8 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	4b17      	ldr	r3, [pc, #92]	@ (80033bc <xTaskCheckForTimeOut+0xcc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d00a      	beq.n	800337c <xTaskCheckForTimeOut+0x8c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	429a      	cmp	r2, r3
 800336e:	d305      	bcc.n	800337c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003370:	2301      	movs	r3, #1
 8003372:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e015      	b.n	80033a8 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	429a      	cmp	r2, r3
 8003384:	d20b      	bcs.n	800339e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	1ad2      	subs	r2, r2, r3
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff ff96 	bl	80032c4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003398:	2300      	movs	r3, #0
 800339a:	61fb      	str	r3, [r7, #28]
 800339c:	e004      	b.n	80033a8 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80033a4:	2301      	movs	r3, #1
 80033a6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80033a8:	f000 fd5a 	bl	8003e60 <vPortExitCritical>

    return xReturn;
 80033ac:	69fb      	ldr	r3, [r7, #28]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3720      	adds	r7, #32
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	200001f4 	.word	0x200001f4
 80033bc:	20000208 	.word	0x20000208

080033c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80033c4:	4b03      	ldr	r3, [pc, #12]	@ (80033d4 <vTaskMissedYield+0x14>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
}
 80033ca:	bf00      	nop
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	20000204 	.word	0x20000204

080033d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80033e0:	f000 f852 	bl	8003488 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80033e4:	4b06      	ldr	r3, [pc, #24]	@ (8003400 <prvIdleTask+0x28>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d9f9      	bls.n	80033e0 <prvIdleTask+0x8>
            {
                taskYIELD();
 80033ec:	4b05      	ldr	r3, [pc, #20]	@ (8003404 <prvIdleTask+0x2c>)
 80033ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80033fc:	e7f0      	b.n	80033e0 <prvIdleTask+0x8>
 80033fe:	bf00      	nop
 8003400:	2000011c 	.word	0x2000011c
 8003404:	e000ed04 	.word	0xe000ed04

08003408 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800340e:	2300      	movs	r3, #0
 8003410:	607b      	str	r3, [r7, #4]
 8003412:	e00c      	b.n	800342e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4a12      	ldr	r2, [pc, #72]	@ (8003468 <prvInitialiseTaskLists+0x60>)
 8003420:	4413      	add	r3, r2
 8003422:	4618      	mov	r0, r3
 8003424:	f7fe fe36 	bl	8002094 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3301      	adds	r3, #1
 800342c:	607b      	str	r3, [r7, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b04      	cmp	r3, #4
 8003432:	d9ef      	bls.n	8003414 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003434:	480d      	ldr	r0, [pc, #52]	@ (800346c <prvInitialiseTaskLists+0x64>)
 8003436:	f7fe fe2d 	bl	8002094 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800343a:	480d      	ldr	r0, [pc, #52]	@ (8003470 <prvInitialiseTaskLists+0x68>)
 800343c:	f7fe fe2a 	bl	8002094 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003440:	480c      	ldr	r0, [pc, #48]	@ (8003474 <prvInitialiseTaskLists+0x6c>)
 8003442:	f7fe fe27 	bl	8002094 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003446:	480c      	ldr	r0, [pc, #48]	@ (8003478 <prvInitialiseTaskLists+0x70>)
 8003448:	f7fe fe24 	bl	8002094 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800344c:	480b      	ldr	r0, [pc, #44]	@ (800347c <prvInitialiseTaskLists+0x74>)
 800344e:	f7fe fe21 	bl	8002094 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003452:	4b0b      	ldr	r3, [pc, #44]	@ (8003480 <prvInitialiseTaskLists+0x78>)
 8003454:	4a05      	ldr	r2, [pc, #20]	@ (800346c <prvInitialiseTaskLists+0x64>)
 8003456:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003458:	4b0a      	ldr	r3, [pc, #40]	@ (8003484 <prvInitialiseTaskLists+0x7c>)
 800345a:	4a05      	ldr	r2, [pc, #20]	@ (8003470 <prvInitialiseTaskLists+0x68>)
 800345c:	601a      	str	r2, [r3, #0]
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	2000011c 	.word	0x2000011c
 800346c:	20000180 	.word	0x20000180
 8003470:	20000194 	.word	0x20000194
 8003474:	200001b0 	.word	0x200001b0
 8003478:	200001c4 	.word	0x200001c4
 800347c:	200001dc 	.word	0x200001dc
 8003480:	200001a8 	.word	0x200001a8
 8003484:	200001ac 	.word	0x200001ac

08003488 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800348e:	e019      	b.n	80034c4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003490:	f000 fcb4 	bl	8003dfc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003494:	4b10      	ldr	r3, [pc, #64]	@ (80034d8 <prvCheckTasksWaitingTermination+0x50>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3304      	adds	r3, #4
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fe fe5d 	bl	8002160 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80034a6:	4b0d      	ldr	r3, [pc, #52]	@ (80034dc <prvCheckTasksWaitingTermination+0x54>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	4a0b      	ldr	r2, [pc, #44]	@ (80034dc <prvCheckTasksWaitingTermination+0x54>)
 80034ae:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80034b0:	4b0b      	ldr	r3, [pc, #44]	@ (80034e0 <prvCheckTasksWaitingTermination+0x58>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	4a0a      	ldr	r2, [pc, #40]	@ (80034e0 <prvCheckTasksWaitingTermination+0x58>)
 80034b8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80034ba:	f000 fcd1 	bl	8003e60 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f810 	bl	80034e4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034c4:	4b06      	ldr	r3, [pc, #24]	@ (80034e0 <prvCheckTasksWaitingTermination+0x58>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1e1      	bne.n	8003490 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80034cc:	bf00      	nop
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	200001c4 	.word	0x200001c4
 80034dc:	200001f0 	.word	0x200001f0
 80034e0:	200001d8 	.word	0x200001d8

080034e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fe27 	bl	8004144 <vPortFree>
            vPortFree( pxTCB );
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fe24 	bl	8004144 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003508:	4b0a      	ldr	r3, [pc, #40]	@ (8003534 <prvResetNextTaskUnblockTime+0x30>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d104      	bne.n	800351c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003512:	4b09      	ldr	r3, [pc, #36]	@ (8003538 <prvResetNextTaskUnblockTime+0x34>)
 8003514:	f04f 32ff 	mov.w	r2, #4294967295
 8003518:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800351a:	e005      	b.n	8003528 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800351c:	4b05      	ldr	r3, [pc, #20]	@ (8003534 <prvResetNextTaskUnblockTime+0x30>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a04      	ldr	r2, [pc, #16]	@ (8003538 <prvResetNextTaskUnblockTime+0x34>)
 8003526:	6013      	str	r3, [r2, #0]
}
 8003528:	bf00      	nop
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	200001a8 	.word	0x200001a8
 8003538:	20000210 	.word	0x20000210

0800353c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003542:	4b0b      	ldr	r3, [pc, #44]	@ (8003570 <xTaskGetSchedulerState+0x34>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d102      	bne.n	8003550 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800354a:	2301      	movs	r3, #1
 800354c:	607b      	str	r3, [r7, #4]
 800354e:	e008      	b.n	8003562 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003550:	4b08      	ldr	r3, [pc, #32]	@ (8003574 <xTaskGetSchedulerState+0x38>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d102      	bne.n	800355e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003558:	2302      	movs	r3, #2
 800355a:	607b      	str	r3, [r7, #4]
 800355c:	e001      	b.n	8003562 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800355e:	2300      	movs	r3, #0
 8003560:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003562:	687b      	ldr	r3, [r7, #4]
    }
 8003564:	4618      	mov	r0, r3
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	200001fc 	.word	0x200001fc
 8003574:	20000218 	.word	0x20000218

08003578 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003582:	4b36      	ldr	r3, [pc, #216]	@ (800365c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003588:	4b35      	ldr	r3, [pc, #212]	@ (8003660 <prvAddCurrentTaskToDelayedList+0xe8>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3304      	adds	r3, #4
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe fde6 	bl	8002160 <uxListRemove>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10b      	bne.n	80035b2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800359a:	4b31      	ldr	r3, [pc, #196]	@ (8003660 <prvAddCurrentTaskToDelayedList+0xe8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	2201      	movs	r2, #1
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43da      	mvns	r2, r3
 80035a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003664 <prvAddCurrentTaskToDelayedList+0xec>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4013      	ands	r3, r2
 80035ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003664 <prvAddCurrentTaskToDelayedList+0xec>)
 80035b0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b8:	d124      	bne.n	8003604 <prvAddCurrentTaskToDelayedList+0x8c>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d021      	beq.n	8003604 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035c0:	4b29      	ldr	r3, [pc, #164]	@ (8003668 <prvAddCurrentTaskToDelayedList+0xf0>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	4b26      	ldr	r3, [pc, #152]	@ (8003660 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	609a      	str	r2, [r3, #8]
 80035ce:	4b24      	ldr	r3, [pc, #144]	@ (8003660 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	6892      	ldr	r2, [r2, #8]
 80035d6:	60da      	str	r2, [r3, #12]
 80035d8:	4b21      	ldr	r3, [pc, #132]	@ (8003660 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	3204      	adds	r2, #4
 80035e2:	605a      	str	r2, [r3, #4]
 80035e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003660 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	1d1a      	adds	r2, r3, #4
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	609a      	str	r2, [r3, #8]
 80035ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003660 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003668 <prvAddCurrentTaskToDelayedList+0xf0>)
 80035f4:	615a      	str	r2, [r3, #20]
 80035f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003668 <prvAddCurrentTaskToDelayedList+0xf0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3301      	adds	r3, #1
 80035fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003668 <prvAddCurrentTaskToDelayedList+0xf0>)
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003602:	e026      	b.n	8003652 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4413      	add	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800360c:	4b14      	ldr	r3, [pc, #80]	@ (8003660 <prvAddCurrentTaskToDelayedList+0xe8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	429a      	cmp	r2, r3
 800361a:	d209      	bcs.n	8003630 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800361c:	4b13      	ldr	r3, [pc, #76]	@ (800366c <prvAddCurrentTaskToDelayedList+0xf4>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4b0f      	ldr	r3, [pc, #60]	@ (8003660 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3304      	adds	r3, #4
 8003626:	4619      	mov	r1, r3
 8003628:	4610      	mov	r0, r2
 800362a:	f7fe fd60 	bl	80020ee <vListInsert>
}
 800362e:	e010      	b.n	8003652 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003630:	4b0f      	ldr	r3, [pc, #60]	@ (8003670 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	4b0a      	ldr	r3, [pc, #40]	@ (8003660 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3304      	adds	r3, #4
 800363a:	4619      	mov	r1, r3
 800363c:	4610      	mov	r0, r2
 800363e:	f7fe fd56 	bl	80020ee <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003642:	4b0c      	ldr	r3, [pc, #48]	@ (8003674 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	429a      	cmp	r2, r3
 800364a:	d202      	bcs.n	8003652 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800364c:	4a09      	ldr	r2, [pc, #36]	@ (8003674 <prvAddCurrentTaskToDelayedList+0xfc>)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6013      	str	r3, [r2, #0]
}
 8003652:	bf00      	nop
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	200001f4 	.word	0x200001f4
 8003660:	20000118 	.word	0x20000118
 8003664:	200001f8 	.word	0x200001f8
 8003668:	200001dc 	.word	0x200001dc
 800366c:	200001ac 	.word	0x200001ac
 8003670:	200001a8 	.word	0x200001a8
 8003674:	20000210 	.word	0x20000210

08003678 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800367e:	2300      	movs	r3, #0
 8003680:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003682:	f000 fa4f 	bl	8003b24 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003686:	4b12      	ldr	r3, [pc, #72]	@ (80036d0 <xTimerCreateTimerTask+0x58>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00b      	beq.n	80036a6 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800368e:	4b11      	ldr	r3, [pc, #68]	@ (80036d4 <xTimerCreateTimerTask+0x5c>)
 8003690:	9301      	str	r3, [sp, #4]
 8003692:	2302      	movs	r3, #2
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	2300      	movs	r3, #0
 8003698:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800369c:	490e      	ldr	r1, [pc, #56]	@ (80036d8 <xTimerCreateTimerTask+0x60>)
 800369e:	480f      	ldr	r0, [pc, #60]	@ (80036dc <xTimerCreateTimerTask+0x64>)
 80036a0:	f7ff f880 	bl	80027a4 <xTaskCreate>
 80036a4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10b      	bne.n	80036c4 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80036ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	603b      	str	r3, [r7, #0]
    }
 80036be:	bf00      	nop
 80036c0:	bf00      	nop
 80036c2:	e7fd      	b.n	80036c0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80036c4:	687b      	ldr	r3, [r7, #4]
    }
 80036c6:	4618      	mov	r0, r3
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	2000024c 	.word	0x2000024c
 80036d4:	20000250 	.word	0x20000250
 80036d8:	08004d58 	.word	0x08004d58
 80036dc:	08003785 	.word	0x08003785

080036e0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80036ec:	e008      	b.n	8003700 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	4413      	add	r3, r2
 80036f6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	699a      	ldr	r2, [r3, #24]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	18d1      	adds	r1, r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 f8df 	bl	80038d0 <prvInsertTimerInActiveList>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ea      	bne.n	80036ee <prvReloadTimer+0xe>
        }
    }
 8003718:	bf00      	nop
 800371a:	bf00      	nop
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800372e:	4b14      	ldr	r3, [pc, #80]	@ (8003780 <prvProcessExpiredTimer+0x5c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	3304      	adds	r3, #4
 800373c:	4618      	mov	r0, r3
 800373e:	f7fe fd0f 	bl	8002160 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f7ff ffc3 	bl	80036e0 <prvReloadTimer>
 800375a:	e008      	b.n	800376e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	b2da      	uxtb	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	4798      	blx	r3
    }
 8003776:	bf00      	nop
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000244 	.word	0x20000244

08003784 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800378c:	f107 0308 	add.w	r3, r7, #8
 8003790:	4618      	mov	r0, r3
 8003792:	f000 f859 	bl	8003848 <prvGetNextExpireTime>
 8003796:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4619      	mov	r1, r3
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 f805 	bl	80037ac <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80037a2:	f000 f8d7 	bl	8003954 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80037a6:	bf00      	nop
 80037a8:	e7f0      	b.n	800378c <prvTimerTask+0x8>
	...

080037ac <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80037b6:	f7ff f9b3 	bl	8002b20 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80037ba:	f107 0308 	add.w	r3, r7, #8
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 f866 	bl	8003890 <prvSampleTimeNow>
 80037c4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d130      	bne.n	800382e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10a      	bne.n	80037e8 <prvProcessTimerOrBlockTask+0x3c>
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d806      	bhi.n	80037e8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80037da:	f7ff f9af 	bl	8002b3c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80037de:	68f9      	ldr	r1, [r7, #12]
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff ff9f 	bl	8003724 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80037e6:	e024      	b.n	8003832 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80037ee:	4b13      	ldr	r3, [pc, #76]	@ (800383c <prvProcessTimerOrBlockTask+0x90>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <prvProcessTimerOrBlockTask+0x50>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <prvProcessTimerOrBlockTask+0x52>
 80037fc:	2300      	movs	r3, #0
 80037fe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003800:	4b0f      	ldr	r3, [pc, #60]	@ (8003840 <prvProcessTimerOrBlockTask+0x94>)
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	4619      	mov	r1, r3
 800380e:	f7fe ff95 	bl	800273c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003812:	f7ff f993 	bl	8002b3c <xTaskResumeAll>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10a      	bne.n	8003832 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800381c:	4b09      	ldr	r3, [pc, #36]	@ (8003844 <prvProcessTimerOrBlockTask+0x98>)
 800381e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	f3bf 8f6f 	isb	sy
    }
 800382c:	e001      	b.n	8003832 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800382e:	f7ff f985 	bl	8002b3c <xTaskResumeAll>
    }
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000248 	.word	0x20000248
 8003840:	2000024c 	.word	0x2000024c
 8003844:	e000ed04 	.word	0xe000ed04

08003848 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003850:	4b0e      	ldr	r3, [pc, #56]	@ (800388c <prvGetNextExpireTime+0x44>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <prvGetNextExpireTime+0x16>
 800385a:	2201      	movs	r2, #1
 800385c:	e000      	b.n	8003860 <prvGetNextExpireTime+0x18>
 800385e:	2200      	movs	r2, #0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d105      	bne.n	8003878 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800386c:	4b07      	ldr	r3, [pc, #28]	@ (800388c <prvGetNextExpireTime+0x44>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	e001      	b.n	800387c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800387c:	68fb      	ldr	r3, [r7, #12]
    }
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	20000244 	.word	0x20000244

08003890 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003898:	f7ff fa4c 	bl	8002d34 <xTaskGetTickCount>
 800389c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800389e:	4b0b      	ldr	r3, [pc, #44]	@ (80038cc <prvSampleTimeNow+0x3c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d205      	bcs.n	80038b4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80038a8:	f000 f916 	bl	8003ad8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	e002      	b.n	80038ba <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80038ba:	4a04      	ldr	r2, [pc, #16]	@ (80038cc <prvSampleTimeNow+0x3c>)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80038c0:	68fb      	ldr	r3, [r7, #12]
    }
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000254 	.word	0x20000254

080038d0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d812      	bhi.n	800391c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	1ad2      	subs	r2, r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	429a      	cmp	r2, r3
 8003902:	d302      	bcc.n	800390a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003904:	2301      	movs	r3, #1
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	e01b      	b.n	8003942 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800390a:	4b10      	ldr	r3, [pc, #64]	@ (800394c <prvInsertTimerInActiveList+0x7c>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	3304      	adds	r3, #4
 8003912:	4619      	mov	r1, r3
 8003914:	4610      	mov	r0, r2
 8003916:	f7fe fbea 	bl	80020ee <vListInsert>
 800391a:	e012      	b.n	8003942 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d206      	bcs.n	8003932 <prvInsertTimerInActiveList+0x62>
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d302      	bcc.n	8003932 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800392c:	2301      	movs	r3, #1
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	e007      	b.n	8003942 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003932:	4b07      	ldr	r3, [pc, #28]	@ (8003950 <prvInsertTimerInActiveList+0x80>)
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	3304      	adds	r3, #4
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f7fe fbd6 	bl	80020ee <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003942:	697b      	ldr	r3, [r7, #20]
    }
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20000248 	.word	0x20000248
 8003950:	20000244 	.word	0x20000244

08003954 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800395a:	e0a9      	b.n	8003ab0 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f2c0 80a6 	blt.w	8003ab0 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d004      	beq.n	800397a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	3304      	adds	r3, #4
 8003974:	4618      	mov	r0, r3
 8003976:	f7fe fbf3 	bl	8002160 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800397a:	1d3b      	adds	r3, r7, #4
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff ff87 	bl	8003890 <prvSampleTimeNow>
 8003982:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	3b01      	subs	r3, #1
 8003988:	2b08      	cmp	r3, #8
 800398a:	f200 808e 	bhi.w	8003aaa <prvProcessReceivedCommands+0x156>
 800398e:	a201      	add	r2, pc, #4	@ (adr r2, 8003994 <prvProcessReceivedCommands+0x40>)
 8003990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003994:	080039b9 	.word	0x080039b9
 8003998:	080039b9 	.word	0x080039b9
 800399c:	08003a21 	.word	0x08003a21
 80039a0:	08003a35 	.word	0x08003a35
 80039a4:	08003a81 	.word	0x08003a81
 80039a8:	080039b9 	.word	0x080039b9
 80039ac:	080039b9 	.word	0x080039b9
 80039b0:	08003a21 	.word	0x08003a21
 80039b4:	08003a35 	.word	0x08003a35
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	18d1      	adds	r1, r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	69f8      	ldr	r0, [r7, #28]
 80039d8:	f7ff ff7a 	bl	80038d0 <prvInsertTimerInActiveList>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d065      	beq.n	8003aae <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d009      	beq.n	8003a04 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	4413      	add	r3, r2
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4619      	mov	r1, r3
 80039fc:	69f8      	ldr	r0, [r7, #28]
 80039fe:	f7ff fe6f 	bl	80036e0 <prvReloadTimer>
 8003a02:	e008      	b.n	8003a16 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a0a:	f023 0301 	bic.w	r3, r3, #1
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	69f8      	ldr	r0, [r7, #28]
 8003a1c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003a1e:	e046      	b.n	8003aae <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003a32:	e03d      	b.n	8003ab0 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10b      	bne.n	8003a6c <prvProcessReceivedCommands+0x118>
        __asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	617b      	str	r3, [r7, #20]
    }
 8003a66:	bf00      	nop
 8003a68:	bf00      	nop
 8003a6a:	e7fd      	b.n	8003a68 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	699a      	ldr	r2, [r3, #24]
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	18d1      	adds	r1, r2, r3
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	69f8      	ldr	r0, [r7, #28]
 8003a7a:	f7ff ff29 	bl	80038d0 <prvInsertTimerInActiveList>
                        break;
 8003a7e:	e017      	b.n	8003ab0 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d103      	bne.n	8003a96 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8003a8e:	69f8      	ldr	r0, [r7, #28]
 8003a90:	f000 fb58 	bl	8004144 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003a94:	e00c      	b.n	8003ab0 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003aa8:	e002      	b.n	8003ab0 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003aaa:	bf00      	nop
 8003aac:	e000      	b.n	8003ab0 <prvProcessReceivedCommands+0x15c>
                        break;
 8003aae:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ab0:	4b08      	ldr	r3, [pc, #32]	@ (8003ad4 <prvProcessReceivedCommands+0x180>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f107 0108 	add.w	r1, r7, #8
 8003ab8:	2200      	movs	r2, #0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe fc7e 	bl	80023bc <xQueueReceive>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f47f af4a 	bne.w	800395c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003ac8:	bf00      	nop
 8003aca:	bf00      	nop
 8003acc:	3720      	adds	r7, #32
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	2000024c 	.word	0x2000024c

08003ad8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ade:	e009      	b.n	8003af4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8003b1c <prvSwitchTimerLists+0x44>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003aea:	f04f 31ff 	mov.w	r1, #4294967295
 8003aee:	6838      	ldr	r0, [r7, #0]
 8003af0:	f7ff fe18 	bl	8003724 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003af4:	4b09      	ldr	r3, [pc, #36]	@ (8003b1c <prvSwitchTimerLists+0x44>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003afe:	4b07      	ldr	r3, [pc, #28]	@ (8003b1c <prvSwitchTimerLists+0x44>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003b04:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <prvSwitchTimerLists+0x48>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a04      	ldr	r2, [pc, #16]	@ (8003b1c <prvSwitchTimerLists+0x44>)
 8003b0a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003b0c:	4a04      	ldr	r2, [pc, #16]	@ (8003b20 <prvSwitchTimerLists+0x48>)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6013      	str	r3, [r2, #0]
    }
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000244 	.word	0x20000244
 8003b20:	20000248 	.word	0x20000248

08003b24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003b28:	f000 f968 	bl	8003dfc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003b2c:	4b12      	ldr	r3, [pc, #72]	@ (8003b78 <prvCheckForValidListAndQueue+0x54>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d11d      	bne.n	8003b70 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003b34:	4811      	ldr	r0, [pc, #68]	@ (8003b7c <prvCheckForValidListAndQueue+0x58>)
 8003b36:	f7fe faad 	bl	8002094 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003b3a:	4811      	ldr	r0, [pc, #68]	@ (8003b80 <prvCheckForValidListAndQueue+0x5c>)
 8003b3c:	f7fe faaa 	bl	8002094 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003b40:	4b10      	ldr	r3, [pc, #64]	@ (8003b84 <prvCheckForValidListAndQueue+0x60>)
 8003b42:	4a0e      	ldr	r2, [pc, #56]	@ (8003b7c <prvCheckForValidListAndQueue+0x58>)
 8003b44:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003b46:	4b10      	ldr	r3, [pc, #64]	@ (8003b88 <prvCheckForValidListAndQueue+0x64>)
 8003b48:	4a0d      	ldr	r2, [pc, #52]	@ (8003b80 <prvCheckForValidListAndQueue+0x5c>)
 8003b4a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	210c      	movs	r1, #12
 8003b50:	200a      	movs	r0, #10
 8003b52:	f7fe fbc1 	bl	80022d8 <xQueueGenericCreate>
 8003b56:	4603      	mov	r3, r0
 8003b58:	4a07      	ldr	r2, [pc, #28]	@ (8003b78 <prvCheckForValidListAndQueue+0x54>)
 8003b5a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003b5c:	4b06      	ldr	r3, [pc, #24]	@ (8003b78 <prvCheckForValidListAndQueue+0x54>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b64:	4b04      	ldr	r3, [pc, #16]	@ (8003b78 <prvCheckForValidListAndQueue+0x54>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4908      	ldr	r1, [pc, #32]	@ (8003b8c <prvCheckForValidListAndQueue+0x68>)
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fe fd96 	bl	800269c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003b70:	f000 f976 	bl	8003e60 <vPortExitCritical>
    }
 8003b74:	bf00      	nop
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	2000024c 	.word	0x2000024c
 8003b7c:	2000021c 	.word	0x2000021c
 8003b80:	20000230 	.word	0x20000230
 8003b84:	20000244 	.word	0x20000244
 8003b88:	20000248 	.word	0x20000248
 8003b8c:	08004d60 	.word	0x08004d60

08003b90 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	3b04      	subs	r3, #4
 8003ba0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ba8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	3b04      	subs	r3, #4
 8003bae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f023 0201 	bic.w	r2, r3, #1
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3b04      	subs	r3, #4
 8003bbe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8003bf4 <pxPortInitialiseStack+0x64>)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3b14      	subs	r3, #20
 8003bca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	3b04      	subs	r3, #4
 8003bd6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f06f 0202 	mvn.w	r2, #2
 8003bde:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	3b20      	subs	r3, #32
 8003be4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003be6:	68fb      	ldr	r3, [r7, #12]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	08003bf9 	.word	0x08003bf9

08003bf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003c02:	4b13      	ldr	r3, [pc, #76]	@ (8003c50 <prvTaskExitError+0x58>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0a:	d00b      	beq.n	8003c24 <prvTaskExitError+0x2c>
        __asm volatile
 8003c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	60fb      	str	r3, [r7, #12]
    }
 8003c1e:	bf00      	nop
 8003c20:	bf00      	nop
 8003c22:	e7fd      	b.n	8003c20 <prvTaskExitError+0x28>
        __asm volatile
 8003c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	60bb      	str	r3, [r7, #8]
    }
 8003c36:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003c38:	bf00      	nop
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0fc      	beq.n	8003c3a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003c40:	bf00      	nop
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20000010 	.word	0x20000010
	...

08003c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003c60:	4b07      	ldr	r3, [pc, #28]	@ (8003c80 <pxCurrentTCBConst2>)
 8003c62:	6819      	ldr	r1, [r3, #0]
 8003c64:	6808      	ldr	r0, [r1, #0]
 8003c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c6a:	f380 8809 	msr	PSP, r0
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f04f 0000 	mov.w	r0, #0
 8003c76:	f380 8811 	msr	BASEPRI, r0
 8003c7a:	4770      	bx	lr
 8003c7c:	f3af 8000 	nop.w

08003c80 <pxCurrentTCBConst2>:
 8003c80:	20000118 	.word	0x20000118
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop

08003c88 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003c88:	4808      	ldr	r0, [pc, #32]	@ (8003cac <prvPortStartFirstTask+0x24>)
 8003c8a:	6800      	ldr	r0, [r0, #0]
 8003c8c:	6800      	ldr	r0, [r0, #0]
 8003c8e:	f380 8808 	msr	MSP, r0
 8003c92:	f04f 0000 	mov.w	r0, #0
 8003c96:	f380 8814 	msr	CONTROL, r0
 8003c9a:	b662      	cpsie	i
 8003c9c:	b661      	cpsie	f
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	df00      	svc	0
 8003ca8:	bf00      	nop
 8003caa:	0000      	.short	0x0000
 8003cac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003cb0:	bf00      	nop
 8003cb2:	bf00      	nop

08003cb4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003cba:	4b47      	ldr	r3, [pc, #284]	@ (8003dd8 <xPortStartScheduler+0x124>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a47      	ldr	r2, [pc, #284]	@ (8003ddc <xPortStartScheduler+0x128>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d10b      	bne.n	8003cdc <xPortStartScheduler+0x28>
        __asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	613b      	str	r3, [r7, #16]
    }
 8003cd6:	bf00      	nop
 8003cd8:	bf00      	nop
 8003cda:	e7fd      	b.n	8003cd8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003cdc:	4b3e      	ldr	r3, [pc, #248]	@ (8003dd8 <xPortStartScheduler+0x124>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a3f      	ldr	r2, [pc, #252]	@ (8003de0 <xPortStartScheduler+0x12c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d10b      	bne.n	8003cfe <xPortStartScheduler+0x4a>
        __asm volatile
 8003ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	60fb      	str	r3, [r7, #12]
    }
 8003cf8:	bf00      	nop
 8003cfa:	bf00      	nop
 8003cfc:	e7fd      	b.n	8003cfa <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003cfe:	4b39      	ldr	r3, [pc, #228]	@ (8003de4 <xPortStartScheduler+0x130>)
 8003d00:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	22ff      	movs	r2, #255	@ 0xff
 8003d0e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	4b31      	ldr	r3, [pc, #196]	@ (8003de8 <xPortStartScheduler+0x134>)
 8003d24:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d26:	4b31      	ldr	r3, [pc, #196]	@ (8003dec <xPortStartScheduler+0x138>)
 8003d28:	2207      	movs	r2, #7
 8003d2a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d2c:	e009      	b.n	8003d42 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8003d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8003dec <xPortStartScheduler+0x138>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	4a2d      	ldr	r2, [pc, #180]	@ (8003dec <xPortStartScheduler+0x138>)
 8003d36:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d4a:	2b80      	cmp	r3, #128	@ 0x80
 8003d4c:	d0ef      	beq.n	8003d2e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d4e:	4b27      	ldr	r3, [pc, #156]	@ (8003dec <xPortStartScheduler+0x138>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f1c3 0307 	rsb	r3, r3, #7
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d00b      	beq.n	8003d72 <xPortStartScheduler+0xbe>
        __asm volatile
 8003d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	60bb      	str	r3, [r7, #8]
    }
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	e7fd      	b.n	8003d6e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d72:	4b1e      	ldr	r3, [pc, #120]	@ (8003dec <xPortStartScheduler+0x138>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	021b      	lsls	r3, r3, #8
 8003d78:	4a1c      	ldr	r2, [pc, #112]	@ (8003dec <xPortStartScheduler+0x138>)
 8003d7a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dec <xPortStartScheduler+0x138>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d84:	4a19      	ldr	r2, [pc, #100]	@ (8003dec <xPortStartScheduler+0x138>)
 8003d86:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003d90:	4b17      	ldr	r3, [pc, #92]	@ (8003df0 <xPortStartScheduler+0x13c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a16      	ldr	r2, [pc, #88]	@ (8003df0 <xPortStartScheduler+0x13c>)
 8003d96:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d9a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003d9c:	4b14      	ldr	r3, [pc, #80]	@ (8003df0 <xPortStartScheduler+0x13c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a13      	ldr	r2, [pc, #76]	@ (8003df0 <xPortStartScheduler+0x13c>)
 8003da2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003da6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003da8:	f000 f8e0 	bl	8003f6c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003dac:	4b11      	ldr	r3, [pc, #68]	@ (8003df4 <xPortStartScheduler+0x140>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003db2:	f000 f8ff 	bl	8003fb4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003db6:	4b10      	ldr	r3, [pc, #64]	@ (8003df8 <xPortStartScheduler+0x144>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a0f      	ldr	r2, [pc, #60]	@ (8003df8 <xPortStartScheduler+0x144>)
 8003dbc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003dc0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003dc2:	f7ff ff61 	bl	8003c88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003dc6:	f7ff f8dd 	bl	8002f84 <vTaskSwitchContext>
    prvTaskExitError();
 8003dca:	f7ff ff15 	bl	8003bf8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	e000ed00 	.word	0xe000ed00
 8003ddc:	410fc271 	.word	0x410fc271
 8003de0:	410fc270 	.word	0x410fc270
 8003de4:	e000e400 	.word	0xe000e400
 8003de8:	20000258 	.word	0x20000258
 8003dec:	2000025c 	.word	0x2000025c
 8003df0:	e000ed20 	.word	0xe000ed20
 8003df4:	20000010 	.word	0x20000010
 8003df8:	e000ef34 	.word	0xe000ef34

08003dfc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
        __asm volatile
 8003e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	607b      	str	r3, [r7, #4]
    }
 8003e14:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003e16:	4b10      	ldr	r3, [pc, #64]	@ (8003e58 <vPortEnterCritical+0x5c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	4a0e      	ldr	r2, [pc, #56]	@ (8003e58 <vPortEnterCritical+0x5c>)
 8003e1e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003e20:	4b0d      	ldr	r3, [pc, #52]	@ (8003e58 <vPortEnterCritical+0x5c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d110      	bne.n	8003e4a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e28:	4b0c      	ldr	r3, [pc, #48]	@ (8003e5c <vPortEnterCritical+0x60>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00b      	beq.n	8003e4a <vPortEnterCritical+0x4e>
        __asm volatile
 8003e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	603b      	str	r3, [r7, #0]
    }
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop
 8003e48:	e7fd      	b.n	8003e46 <vPortEnterCritical+0x4a>
    }
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20000010 	.word	0x20000010
 8003e5c:	e000ed04 	.word	0xe000ed04

08003e60 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003e66:	4b12      	ldr	r3, [pc, #72]	@ (8003eb0 <vPortExitCritical+0x50>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10b      	bne.n	8003e86 <vPortExitCritical+0x26>
        __asm volatile
 8003e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	607b      	str	r3, [r7, #4]
    }
 8003e80:	bf00      	nop
 8003e82:	bf00      	nop
 8003e84:	e7fd      	b.n	8003e82 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003e86:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb0 <vPortExitCritical+0x50>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	4a08      	ldr	r2, [pc, #32]	@ (8003eb0 <vPortExitCritical+0x50>)
 8003e8e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003e90:	4b07      	ldr	r3, [pc, #28]	@ (8003eb0 <vPortExitCritical+0x50>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d105      	bne.n	8003ea4 <vPortExitCritical+0x44>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003ea2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	20000010 	.word	0x20000010
	...

08003ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003ec0:	f3ef 8009 	mrs	r0, PSP
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	4b15      	ldr	r3, [pc, #84]	@ (8003f20 <pxCurrentTCBConst>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	f01e 0f10 	tst.w	lr, #16
 8003ed0:	bf08      	it	eq
 8003ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eda:	6010      	str	r0, [r2, #0]
 8003edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ee0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003ee4:	f380 8811 	msr	BASEPRI, r0
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f7ff f848 	bl	8002f84 <vTaskSwitchContext>
 8003ef4:	f04f 0000 	mov.w	r0, #0
 8003ef8:	f380 8811 	msr	BASEPRI, r0
 8003efc:	bc09      	pop	{r0, r3}
 8003efe:	6819      	ldr	r1, [r3, #0]
 8003f00:	6808      	ldr	r0, [r1, #0]
 8003f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f06:	f01e 0f10 	tst.w	lr, #16
 8003f0a:	bf08      	it	eq
 8003f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003f10:	f380 8809 	msr	PSP, r0
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	f3af 8000 	nop.w

08003f20 <pxCurrentTCBConst>:
 8003f20:	20000118 	.word	0x20000118
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003f24:	bf00      	nop
 8003f26:	bf00      	nop

08003f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
        __asm volatile
 8003f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	607b      	str	r3, [r7, #4]
    }
 8003f40:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003f42:	f7fe ff07 	bl	8002d54 <xTaskIncrementTick>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f4c:	4b06      	ldr	r3, [pc, #24]	@ (8003f68 <SysTick_Handler+0x40>)
 8003f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	2300      	movs	r3, #0
 8003f56:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	f383 8811 	msr	BASEPRI, r3
    }
 8003f5e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003f60:	bf00      	nop
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f70:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa0 <vPortSetupTimerInterrupt+0x34>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f76:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa4 <vPortSetupTimerInterrupt+0x38>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa8 <vPortSetupTimerInterrupt+0x3c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a0a      	ldr	r2, [pc, #40]	@ (8003fac <vPortSetupTimerInterrupt+0x40>)
 8003f82:	fba2 2303 	umull	r2, r3, r2, r3
 8003f86:	099b      	lsrs	r3, r3, #6
 8003f88:	4a09      	ldr	r2, [pc, #36]	@ (8003fb0 <vPortSetupTimerInterrupt+0x44>)
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f8e:	4b04      	ldr	r3, [pc, #16]	@ (8003fa0 <vPortSetupTimerInterrupt+0x34>)
 8003f90:	2207      	movs	r2, #7
 8003f92:	601a      	str	r2, [r3, #0]
}
 8003f94:	bf00      	nop
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	e000e010 	.word	0xe000e010
 8003fa4:	e000e018 	.word	0xe000e018
 8003fa8:	20000000 	.word	0x20000000
 8003fac:	10624dd3 	.word	0x10624dd3
 8003fb0:	e000e014 	.word	0xe000e014

08003fb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003fb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003fc4 <vPortEnableVFP+0x10>
 8003fb8:	6801      	ldr	r1, [r0, #0]
 8003fba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003fbe:	6001      	str	r1, [r0, #0]
 8003fc0:	4770      	bx	lr
 8003fc2:	0000      	.short	0x0000
 8003fc4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003fc8:	bf00      	nop
 8003fca:	bf00      	nop

08003fcc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08a      	sub	sp, #40	@ 0x28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003fd8:	f7fe fda2 	bl	8002b20 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003fdc:	4b54      	ldr	r3, [pc, #336]	@ (8004130 <pvPortMalloc+0x164>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003fe4:	f000 f90c 	bl	8004200 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d012      	beq.n	8004014 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003fee:	2208      	movs	r2, #8
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	43db      	mvns	r3, r3
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	429a      	cmp	r2, r3
 8004004:	d804      	bhi.n	8004010 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	4413      	add	r3, r2
 800400c:	607b      	str	r3, [r7, #4]
 800400e:	e001      	b.n	8004014 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004010:	2300      	movs	r3, #0
 8004012:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	db71      	blt.n	80040fe <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d06e      	beq.n	80040fe <pvPortMalloc+0x132>
 8004020:	4b44      	ldr	r3, [pc, #272]	@ (8004134 <pvPortMalloc+0x168>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	429a      	cmp	r2, r3
 8004028:	d869      	bhi.n	80040fe <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800402a:	4b43      	ldr	r3, [pc, #268]	@ (8004138 <pvPortMalloc+0x16c>)
 800402c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800402e:	4b42      	ldr	r3, [pc, #264]	@ (8004138 <pvPortMalloc+0x16c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004034:	e004      	b.n	8004040 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800403a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	429a      	cmp	r2, r3
 8004048:	d903      	bls.n	8004052 <pvPortMalloc+0x86>
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f1      	bne.n	8004036 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004052:	4b37      	ldr	r3, [pc, #220]	@ (8004130 <pvPortMalloc+0x164>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004058:	429a      	cmp	r2, r3
 800405a:	d050      	beq.n	80040fe <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2208      	movs	r2, #8
 8004062:	4413      	add	r3, r2
 8004064:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	1ad2      	subs	r2, r2, r3
 8004076:	2308      	movs	r3, #8
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	429a      	cmp	r2, r3
 800407c:	d920      	bls.n	80040c0 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800407e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4413      	add	r3, r2
 8004084:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00b      	beq.n	80040a8 <pvPortMalloc+0xdc>
        __asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	613b      	str	r3, [r7, #16]
    }
 80040a2:	bf00      	nop
 80040a4:	bf00      	nop
 80040a6:	e7fd      	b.n	80040a4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80040a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	1ad2      	subs	r2, r2, r3
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80040b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80040ba:	6978      	ldr	r0, [r7, #20]
 80040bc:	f000 f8fc 	bl	80042b8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040c0:	4b1c      	ldr	r3, [pc, #112]	@ (8004134 <pvPortMalloc+0x168>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004134 <pvPortMalloc+0x168>)
 80040cc:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80040ce:	4b19      	ldr	r3, [pc, #100]	@ (8004134 <pvPortMalloc+0x168>)
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4b1a      	ldr	r3, [pc, #104]	@ (800413c <pvPortMalloc+0x170>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d203      	bcs.n	80040e2 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80040da:	4b16      	ldr	r3, [pc, #88]	@ (8004134 <pvPortMalloc+0x168>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a17      	ldr	r2, [pc, #92]	@ (800413c <pvPortMalloc+0x170>)
 80040e0:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80040e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80040ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ec:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80040ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80040f4:	4b12      	ldr	r3, [pc, #72]	@ (8004140 <pvPortMalloc+0x174>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3301      	adds	r3, #1
 80040fa:	4a11      	ldr	r2, [pc, #68]	@ (8004140 <pvPortMalloc+0x174>)
 80040fc:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80040fe:	f7fe fd1d 	bl	8002b3c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00b      	beq.n	8004124 <pvPortMalloc+0x158>
        __asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	60fb      	str	r3, [r7, #12]
    }
 800411e:	bf00      	nop
 8004120:	bf00      	nop
 8004122:	e7fd      	b.n	8004120 <pvPortMalloc+0x154>
    return pvReturn;
 8004124:	69fb      	ldr	r3, [r7, #28]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3728      	adds	r7, #40	@ 0x28
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20012e68 	.word	0x20012e68
 8004134:	20012e6c 	.word	0x20012e6c
 8004138:	20012e60 	.word	0x20012e60
 800413c:	20012e70 	.word	0x20012e70
 8004140:	20012e74 	.word	0x20012e74

08004144 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d04b      	beq.n	80041ee <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004156:	2308      	movs	r3, #8
 8004158:	425b      	negs	r3, r3
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4413      	add	r3, r2
 800415e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	db0b      	blt.n	8004184 <vPortFree+0x40>
        __asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	60fb      	str	r3, [r7, #12]
    }
 800417e:	bf00      	nop
 8004180:	bf00      	nop
 8004182:	e7fd      	b.n	8004180 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00b      	beq.n	80041a4 <vPortFree+0x60>
        __asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	60bb      	str	r3, [r7, #8]
    }
 800419e:	bf00      	nop
 80041a0:	bf00      	nop
 80041a2:	e7fd      	b.n	80041a0 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	0fdb      	lsrs	r3, r3, #31
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01c      	beq.n	80041ee <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d118      	bne.n	80041ee <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80041c8:	f7fe fcaa 	bl	8002b20 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	4b09      	ldr	r3, [pc, #36]	@ (80041f8 <vPortFree+0xb4>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4413      	add	r3, r2
 80041d6:	4a08      	ldr	r2, [pc, #32]	@ (80041f8 <vPortFree+0xb4>)
 80041d8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80041da:	6938      	ldr	r0, [r7, #16]
 80041dc:	f000 f86c 	bl	80042b8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80041e0:	4b06      	ldr	r3, [pc, #24]	@ (80041fc <vPortFree+0xb8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3301      	adds	r3, #1
 80041e6:	4a05      	ldr	r2, [pc, #20]	@ (80041fc <vPortFree+0xb8>)
 80041e8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80041ea:	f7fe fca7 	bl	8002b3c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80041ee:	bf00      	nop
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20012e6c 	.word	0x20012e6c
 80041fc:	20012e78 	.word	0x20012e78

08004200 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004206:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800420a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800420c:	4b25      	ldr	r3, [pc, #148]	@ (80042a4 <prvHeapInit+0xa4>)
 800420e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00c      	beq.n	8004234 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3307      	adds	r3, #7
 800421e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0307 	bic.w	r3, r3, #7
 8004226:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	4a1d      	ldr	r2, [pc, #116]	@ (80042a4 <prvHeapInit+0xa4>)
 8004230:	4413      	add	r3, r2
 8004232:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004238:	4a1b      	ldr	r2, [pc, #108]	@ (80042a8 <prvHeapInit+0xa8>)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800423e:	4b1a      	ldr	r3, [pc, #104]	@ (80042a8 <prvHeapInit+0xa8>)
 8004240:	2200      	movs	r2, #0
 8004242:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	4413      	add	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800424c:	2208      	movs	r2, #8
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0307 	bic.w	r3, r3, #7
 800425a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4a13      	ldr	r2, [pc, #76]	@ (80042ac <prvHeapInit+0xac>)
 8004260:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004262:	4b12      	ldr	r3, [pc, #72]	@ (80042ac <prvHeapInit+0xac>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2200      	movs	r2, #0
 8004268:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800426a:	4b10      	ldr	r3, [pc, #64]	@ (80042ac <prvHeapInit+0xac>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	1ad2      	subs	r2, r2, r3
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004280:	4b0a      	ldr	r3, [pc, #40]	@ (80042ac <prvHeapInit+0xac>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	4a08      	ldr	r2, [pc, #32]	@ (80042b0 <prvHeapInit+0xb0>)
 800428e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	4a07      	ldr	r2, [pc, #28]	@ (80042b4 <prvHeapInit+0xb4>)
 8004296:	6013      	str	r3, [r2, #0]
}
 8004298:	bf00      	nop
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	20000260 	.word	0x20000260
 80042a8:	20012e60 	.word	0x20012e60
 80042ac:	20012e68 	.word	0x20012e68
 80042b0:	20012e70 	.word	0x20012e70
 80042b4:	20012e6c 	.word	0x20012e6c

080042b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80042c0:	4b28      	ldr	r3, [pc, #160]	@ (8004364 <prvInsertBlockIntoFreeList+0xac>)
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	e002      	b.n	80042cc <prvInsertBlockIntoFreeList+0x14>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d8f7      	bhi.n	80042c6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	4413      	add	r3, r2
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d108      	bne.n	80042fa <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	441a      	add	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	441a      	add	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d118      	bne.n	8004340 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	4b15      	ldr	r3, [pc, #84]	@ (8004368 <prvInsertBlockIntoFreeList+0xb0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d00d      	beq.n	8004336 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	441a      	add	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	e008      	b.n	8004348 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004336:	4b0c      	ldr	r3, [pc, #48]	@ (8004368 <prvInsertBlockIntoFreeList+0xb0>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	e003      	b.n	8004348 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	429a      	cmp	r2, r3
 800434e:	d002      	beq.n	8004356 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004356:	bf00      	nop
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	20012e60 	.word	0x20012e60
 8004368:	20012e68 	.word	0x20012e68

0800436c <std>:
 800436c:	2300      	movs	r3, #0
 800436e:	b510      	push	{r4, lr}
 8004370:	4604      	mov	r4, r0
 8004372:	e9c0 3300 	strd	r3, r3, [r0]
 8004376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800437a:	6083      	str	r3, [r0, #8]
 800437c:	8181      	strh	r1, [r0, #12]
 800437e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004380:	81c2      	strh	r2, [r0, #14]
 8004382:	6183      	str	r3, [r0, #24]
 8004384:	4619      	mov	r1, r3
 8004386:	2208      	movs	r2, #8
 8004388:	305c      	adds	r0, #92	@ 0x5c
 800438a:	f000 f9e7 	bl	800475c <memset>
 800438e:	4b0d      	ldr	r3, [pc, #52]	@ (80043c4 <std+0x58>)
 8004390:	6263      	str	r3, [r4, #36]	@ 0x24
 8004392:	4b0d      	ldr	r3, [pc, #52]	@ (80043c8 <std+0x5c>)
 8004394:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004396:	4b0d      	ldr	r3, [pc, #52]	@ (80043cc <std+0x60>)
 8004398:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800439a:	4b0d      	ldr	r3, [pc, #52]	@ (80043d0 <std+0x64>)
 800439c:	6323      	str	r3, [r4, #48]	@ 0x30
 800439e:	4b0d      	ldr	r3, [pc, #52]	@ (80043d4 <std+0x68>)
 80043a0:	6224      	str	r4, [r4, #32]
 80043a2:	429c      	cmp	r4, r3
 80043a4:	d006      	beq.n	80043b4 <std+0x48>
 80043a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80043aa:	4294      	cmp	r4, r2
 80043ac:	d002      	beq.n	80043b4 <std+0x48>
 80043ae:	33d0      	adds	r3, #208	@ 0xd0
 80043b0:	429c      	cmp	r4, r3
 80043b2:	d105      	bne.n	80043c0 <std+0x54>
 80043b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80043b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043bc:	f000 ba40 	b.w	8004840 <__retarget_lock_init_recursive>
 80043c0:	bd10      	pop	{r4, pc}
 80043c2:	bf00      	nop
 80043c4:	080045ad 	.word	0x080045ad
 80043c8:	080045cf 	.word	0x080045cf
 80043cc:	08004607 	.word	0x08004607
 80043d0:	0800462b 	.word	0x0800462b
 80043d4:	20012e7c 	.word	0x20012e7c

080043d8 <stdio_exit_handler>:
 80043d8:	4a02      	ldr	r2, [pc, #8]	@ (80043e4 <stdio_exit_handler+0xc>)
 80043da:	4903      	ldr	r1, [pc, #12]	@ (80043e8 <stdio_exit_handler+0x10>)
 80043dc:	4803      	ldr	r0, [pc, #12]	@ (80043ec <stdio_exit_handler+0x14>)
 80043de:	f000 b869 	b.w	80044b4 <_fwalk_sglue>
 80043e2:	bf00      	nop
 80043e4:	20000014 	.word	0x20000014
 80043e8:	08004b5d 	.word	0x08004b5d
 80043ec:	20000024 	.word	0x20000024

080043f0 <cleanup_stdio>:
 80043f0:	6841      	ldr	r1, [r0, #4]
 80043f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004424 <cleanup_stdio+0x34>)
 80043f4:	4299      	cmp	r1, r3
 80043f6:	b510      	push	{r4, lr}
 80043f8:	4604      	mov	r4, r0
 80043fa:	d001      	beq.n	8004400 <cleanup_stdio+0x10>
 80043fc:	f000 fbae 	bl	8004b5c <_fflush_r>
 8004400:	68a1      	ldr	r1, [r4, #8]
 8004402:	4b09      	ldr	r3, [pc, #36]	@ (8004428 <cleanup_stdio+0x38>)
 8004404:	4299      	cmp	r1, r3
 8004406:	d002      	beq.n	800440e <cleanup_stdio+0x1e>
 8004408:	4620      	mov	r0, r4
 800440a:	f000 fba7 	bl	8004b5c <_fflush_r>
 800440e:	68e1      	ldr	r1, [r4, #12]
 8004410:	4b06      	ldr	r3, [pc, #24]	@ (800442c <cleanup_stdio+0x3c>)
 8004412:	4299      	cmp	r1, r3
 8004414:	d004      	beq.n	8004420 <cleanup_stdio+0x30>
 8004416:	4620      	mov	r0, r4
 8004418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800441c:	f000 bb9e 	b.w	8004b5c <_fflush_r>
 8004420:	bd10      	pop	{r4, pc}
 8004422:	bf00      	nop
 8004424:	20012e7c 	.word	0x20012e7c
 8004428:	20012ee4 	.word	0x20012ee4
 800442c:	20012f4c 	.word	0x20012f4c

08004430 <global_stdio_init.part.0>:
 8004430:	b510      	push	{r4, lr}
 8004432:	4b0b      	ldr	r3, [pc, #44]	@ (8004460 <global_stdio_init.part.0+0x30>)
 8004434:	4c0b      	ldr	r4, [pc, #44]	@ (8004464 <global_stdio_init.part.0+0x34>)
 8004436:	4a0c      	ldr	r2, [pc, #48]	@ (8004468 <global_stdio_init.part.0+0x38>)
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	4620      	mov	r0, r4
 800443c:	2200      	movs	r2, #0
 800443e:	2104      	movs	r1, #4
 8004440:	f7ff ff94 	bl	800436c <std>
 8004444:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004448:	2201      	movs	r2, #1
 800444a:	2109      	movs	r1, #9
 800444c:	f7ff ff8e 	bl	800436c <std>
 8004450:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004454:	2202      	movs	r2, #2
 8004456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800445a:	2112      	movs	r1, #18
 800445c:	f7ff bf86 	b.w	800436c <std>
 8004460:	20012fb4 	.word	0x20012fb4
 8004464:	20012e7c 	.word	0x20012e7c
 8004468:	080043d9 	.word	0x080043d9

0800446c <__sfp_lock_acquire>:
 800446c:	4801      	ldr	r0, [pc, #4]	@ (8004474 <__sfp_lock_acquire+0x8>)
 800446e:	f000 b9e8 	b.w	8004842 <__retarget_lock_acquire_recursive>
 8004472:	bf00      	nop
 8004474:	20012fbd 	.word	0x20012fbd

08004478 <__sfp_lock_release>:
 8004478:	4801      	ldr	r0, [pc, #4]	@ (8004480 <__sfp_lock_release+0x8>)
 800447a:	f000 b9e3 	b.w	8004844 <__retarget_lock_release_recursive>
 800447e:	bf00      	nop
 8004480:	20012fbd 	.word	0x20012fbd

08004484 <__sinit>:
 8004484:	b510      	push	{r4, lr}
 8004486:	4604      	mov	r4, r0
 8004488:	f7ff fff0 	bl	800446c <__sfp_lock_acquire>
 800448c:	6a23      	ldr	r3, [r4, #32]
 800448e:	b11b      	cbz	r3, 8004498 <__sinit+0x14>
 8004490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004494:	f7ff bff0 	b.w	8004478 <__sfp_lock_release>
 8004498:	4b04      	ldr	r3, [pc, #16]	@ (80044ac <__sinit+0x28>)
 800449a:	6223      	str	r3, [r4, #32]
 800449c:	4b04      	ldr	r3, [pc, #16]	@ (80044b0 <__sinit+0x2c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1f5      	bne.n	8004490 <__sinit+0xc>
 80044a4:	f7ff ffc4 	bl	8004430 <global_stdio_init.part.0>
 80044a8:	e7f2      	b.n	8004490 <__sinit+0xc>
 80044aa:	bf00      	nop
 80044ac:	080043f1 	.word	0x080043f1
 80044b0:	20012fb4 	.word	0x20012fb4

080044b4 <_fwalk_sglue>:
 80044b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044b8:	4607      	mov	r7, r0
 80044ba:	4688      	mov	r8, r1
 80044bc:	4614      	mov	r4, r2
 80044be:	2600      	movs	r6, #0
 80044c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044c4:	f1b9 0901 	subs.w	r9, r9, #1
 80044c8:	d505      	bpl.n	80044d6 <_fwalk_sglue+0x22>
 80044ca:	6824      	ldr	r4, [r4, #0]
 80044cc:	2c00      	cmp	r4, #0
 80044ce:	d1f7      	bne.n	80044c0 <_fwalk_sglue+0xc>
 80044d0:	4630      	mov	r0, r6
 80044d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044d6:	89ab      	ldrh	r3, [r5, #12]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d907      	bls.n	80044ec <_fwalk_sglue+0x38>
 80044dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044e0:	3301      	adds	r3, #1
 80044e2:	d003      	beq.n	80044ec <_fwalk_sglue+0x38>
 80044e4:	4629      	mov	r1, r5
 80044e6:	4638      	mov	r0, r7
 80044e8:	47c0      	blx	r8
 80044ea:	4306      	orrs	r6, r0
 80044ec:	3568      	adds	r5, #104	@ 0x68
 80044ee:	e7e9      	b.n	80044c4 <_fwalk_sglue+0x10>

080044f0 <_puts_r>:
 80044f0:	6a03      	ldr	r3, [r0, #32]
 80044f2:	b570      	push	{r4, r5, r6, lr}
 80044f4:	6884      	ldr	r4, [r0, #8]
 80044f6:	4605      	mov	r5, r0
 80044f8:	460e      	mov	r6, r1
 80044fa:	b90b      	cbnz	r3, 8004500 <_puts_r+0x10>
 80044fc:	f7ff ffc2 	bl	8004484 <__sinit>
 8004500:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004502:	07db      	lsls	r3, r3, #31
 8004504:	d405      	bmi.n	8004512 <_puts_r+0x22>
 8004506:	89a3      	ldrh	r3, [r4, #12]
 8004508:	0598      	lsls	r0, r3, #22
 800450a:	d402      	bmi.n	8004512 <_puts_r+0x22>
 800450c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800450e:	f000 f998 	bl	8004842 <__retarget_lock_acquire_recursive>
 8004512:	89a3      	ldrh	r3, [r4, #12]
 8004514:	0719      	lsls	r1, r3, #28
 8004516:	d502      	bpl.n	800451e <_puts_r+0x2e>
 8004518:	6923      	ldr	r3, [r4, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d135      	bne.n	800458a <_puts_r+0x9a>
 800451e:	4621      	mov	r1, r4
 8004520:	4628      	mov	r0, r5
 8004522:	f000 f8c5 	bl	80046b0 <__swsetup_r>
 8004526:	b380      	cbz	r0, 800458a <_puts_r+0x9a>
 8004528:	f04f 35ff 	mov.w	r5, #4294967295
 800452c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800452e:	07da      	lsls	r2, r3, #31
 8004530:	d405      	bmi.n	800453e <_puts_r+0x4e>
 8004532:	89a3      	ldrh	r3, [r4, #12]
 8004534:	059b      	lsls	r3, r3, #22
 8004536:	d402      	bmi.n	800453e <_puts_r+0x4e>
 8004538:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800453a:	f000 f983 	bl	8004844 <__retarget_lock_release_recursive>
 800453e:	4628      	mov	r0, r5
 8004540:	bd70      	pop	{r4, r5, r6, pc}
 8004542:	2b00      	cmp	r3, #0
 8004544:	da04      	bge.n	8004550 <_puts_r+0x60>
 8004546:	69a2      	ldr	r2, [r4, #24]
 8004548:	429a      	cmp	r2, r3
 800454a:	dc17      	bgt.n	800457c <_puts_r+0x8c>
 800454c:	290a      	cmp	r1, #10
 800454e:	d015      	beq.n	800457c <_puts_r+0x8c>
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	6022      	str	r2, [r4, #0]
 8004556:	7019      	strb	r1, [r3, #0]
 8004558:	68a3      	ldr	r3, [r4, #8]
 800455a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800455e:	3b01      	subs	r3, #1
 8004560:	60a3      	str	r3, [r4, #8]
 8004562:	2900      	cmp	r1, #0
 8004564:	d1ed      	bne.n	8004542 <_puts_r+0x52>
 8004566:	2b00      	cmp	r3, #0
 8004568:	da11      	bge.n	800458e <_puts_r+0x9e>
 800456a:	4622      	mov	r2, r4
 800456c:	210a      	movs	r1, #10
 800456e:	4628      	mov	r0, r5
 8004570:	f000 f85f 	bl	8004632 <__swbuf_r>
 8004574:	3001      	adds	r0, #1
 8004576:	d0d7      	beq.n	8004528 <_puts_r+0x38>
 8004578:	250a      	movs	r5, #10
 800457a:	e7d7      	b.n	800452c <_puts_r+0x3c>
 800457c:	4622      	mov	r2, r4
 800457e:	4628      	mov	r0, r5
 8004580:	f000 f857 	bl	8004632 <__swbuf_r>
 8004584:	3001      	adds	r0, #1
 8004586:	d1e7      	bne.n	8004558 <_puts_r+0x68>
 8004588:	e7ce      	b.n	8004528 <_puts_r+0x38>
 800458a:	3e01      	subs	r6, #1
 800458c:	e7e4      	b.n	8004558 <_puts_r+0x68>
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	6022      	str	r2, [r4, #0]
 8004594:	220a      	movs	r2, #10
 8004596:	701a      	strb	r2, [r3, #0]
 8004598:	e7ee      	b.n	8004578 <_puts_r+0x88>
	...

0800459c <puts>:
 800459c:	4b02      	ldr	r3, [pc, #8]	@ (80045a8 <puts+0xc>)
 800459e:	4601      	mov	r1, r0
 80045a0:	6818      	ldr	r0, [r3, #0]
 80045a2:	f7ff bfa5 	b.w	80044f0 <_puts_r>
 80045a6:	bf00      	nop
 80045a8:	20000020 	.word	0x20000020

080045ac <__sread>:
 80045ac:	b510      	push	{r4, lr}
 80045ae:	460c      	mov	r4, r1
 80045b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045b4:	f000 f8fc 	bl	80047b0 <_read_r>
 80045b8:	2800      	cmp	r0, #0
 80045ba:	bfab      	itete	ge
 80045bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80045be:	89a3      	ldrhlt	r3, [r4, #12]
 80045c0:	181b      	addge	r3, r3, r0
 80045c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80045c6:	bfac      	ite	ge
 80045c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80045ca:	81a3      	strhlt	r3, [r4, #12]
 80045cc:	bd10      	pop	{r4, pc}

080045ce <__swrite>:
 80045ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d2:	461f      	mov	r7, r3
 80045d4:	898b      	ldrh	r3, [r1, #12]
 80045d6:	05db      	lsls	r3, r3, #23
 80045d8:	4605      	mov	r5, r0
 80045da:	460c      	mov	r4, r1
 80045dc:	4616      	mov	r6, r2
 80045de:	d505      	bpl.n	80045ec <__swrite+0x1e>
 80045e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045e4:	2302      	movs	r3, #2
 80045e6:	2200      	movs	r2, #0
 80045e8:	f000 f8d0 	bl	800478c <_lseek_r>
 80045ec:	89a3      	ldrh	r3, [r4, #12]
 80045ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045f6:	81a3      	strh	r3, [r4, #12]
 80045f8:	4632      	mov	r2, r6
 80045fa:	463b      	mov	r3, r7
 80045fc:	4628      	mov	r0, r5
 80045fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004602:	f000 b8e7 	b.w	80047d4 <_write_r>

08004606 <__sseek>:
 8004606:	b510      	push	{r4, lr}
 8004608:	460c      	mov	r4, r1
 800460a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800460e:	f000 f8bd 	bl	800478c <_lseek_r>
 8004612:	1c43      	adds	r3, r0, #1
 8004614:	89a3      	ldrh	r3, [r4, #12]
 8004616:	bf15      	itete	ne
 8004618:	6560      	strne	r0, [r4, #84]	@ 0x54
 800461a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800461e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004622:	81a3      	strheq	r3, [r4, #12]
 8004624:	bf18      	it	ne
 8004626:	81a3      	strhne	r3, [r4, #12]
 8004628:	bd10      	pop	{r4, pc}

0800462a <__sclose>:
 800462a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800462e:	f000 b89d 	b.w	800476c <_close_r>

08004632 <__swbuf_r>:
 8004632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004634:	460e      	mov	r6, r1
 8004636:	4614      	mov	r4, r2
 8004638:	4605      	mov	r5, r0
 800463a:	b118      	cbz	r0, 8004644 <__swbuf_r+0x12>
 800463c:	6a03      	ldr	r3, [r0, #32]
 800463e:	b90b      	cbnz	r3, 8004644 <__swbuf_r+0x12>
 8004640:	f7ff ff20 	bl	8004484 <__sinit>
 8004644:	69a3      	ldr	r3, [r4, #24]
 8004646:	60a3      	str	r3, [r4, #8]
 8004648:	89a3      	ldrh	r3, [r4, #12]
 800464a:	071a      	lsls	r2, r3, #28
 800464c:	d501      	bpl.n	8004652 <__swbuf_r+0x20>
 800464e:	6923      	ldr	r3, [r4, #16]
 8004650:	b943      	cbnz	r3, 8004664 <__swbuf_r+0x32>
 8004652:	4621      	mov	r1, r4
 8004654:	4628      	mov	r0, r5
 8004656:	f000 f82b 	bl	80046b0 <__swsetup_r>
 800465a:	b118      	cbz	r0, 8004664 <__swbuf_r+0x32>
 800465c:	f04f 37ff 	mov.w	r7, #4294967295
 8004660:	4638      	mov	r0, r7
 8004662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	6922      	ldr	r2, [r4, #16]
 8004668:	1a98      	subs	r0, r3, r2
 800466a:	6963      	ldr	r3, [r4, #20]
 800466c:	b2f6      	uxtb	r6, r6
 800466e:	4283      	cmp	r3, r0
 8004670:	4637      	mov	r7, r6
 8004672:	dc05      	bgt.n	8004680 <__swbuf_r+0x4e>
 8004674:	4621      	mov	r1, r4
 8004676:	4628      	mov	r0, r5
 8004678:	f000 fa70 	bl	8004b5c <_fflush_r>
 800467c:	2800      	cmp	r0, #0
 800467e:	d1ed      	bne.n	800465c <__swbuf_r+0x2a>
 8004680:	68a3      	ldr	r3, [r4, #8]
 8004682:	3b01      	subs	r3, #1
 8004684:	60a3      	str	r3, [r4, #8]
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	6022      	str	r2, [r4, #0]
 800468c:	701e      	strb	r6, [r3, #0]
 800468e:	6962      	ldr	r2, [r4, #20]
 8004690:	1c43      	adds	r3, r0, #1
 8004692:	429a      	cmp	r2, r3
 8004694:	d004      	beq.n	80046a0 <__swbuf_r+0x6e>
 8004696:	89a3      	ldrh	r3, [r4, #12]
 8004698:	07db      	lsls	r3, r3, #31
 800469a:	d5e1      	bpl.n	8004660 <__swbuf_r+0x2e>
 800469c:	2e0a      	cmp	r6, #10
 800469e:	d1df      	bne.n	8004660 <__swbuf_r+0x2e>
 80046a0:	4621      	mov	r1, r4
 80046a2:	4628      	mov	r0, r5
 80046a4:	f000 fa5a 	bl	8004b5c <_fflush_r>
 80046a8:	2800      	cmp	r0, #0
 80046aa:	d0d9      	beq.n	8004660 <__swbuf_r+0x2e>
 80046ac:	e7d6      	b.n	800465c <__swbuf_r+0x2a>
	...

080046b0 <__swsetup_r>:
 80046b0:	b538      	push	{r3, r4, r5, lr}
 80046b2:	4b29      	ldr	r3, [pc, #164]	@ (8004758 <__swsetup_r+0xa8>)
 80046b4:	4605      	mov	r5, r0
 80046b6:	6818      	ldr	r0, [r3, #0]
 80046b8:	460c      	mov	r4, r1
 80046ba:	b118      	cbz	r0, 80046c4 <__swsetup_r+0x14>
 80046bc:	6a03      	ldr	r3, [r0, #32]
 80046be:	b90b      	cbnz	r3, 80046c4 <__swsetup_r+0x14>
 80046c0:	f7ff fee0 	bl	8004484 <__sinit>
 80046c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046c8:	0719      	lsls	r1, r3, #28
 80046ca:	d422      	bmi.n	8004712 <__swsetup_r+0x62>
 80046cc:	06da      	lsls	r2, r3, #27
 80046ce:	d407      	bmi.n	80046e0 <__swsetup_r+0x30>
 80046d0:	2209      	movs	r2, #9
 80046d2:	602a      	str	r2, [r5, #0]
 80046d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046d8:	81a3      	strh	r3, [r4, #12]
 80046da:	f04f 30ff 	mov.w	r0, #4294967295
 80046de:	e033      	b.n	8004748 <__swsetup_r+0x98>
 80046e0:	0758      	lsls	r0, r3, #29
 80046e2:	d512      	bpl.n	800470a <__swsetup_r+0x5a>
 80046e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80046e6:	b141      	cbz	r1, 80046fa <__swsetup_r+0x4a>
 80046e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80046ec:	4299      	cmp	r1, r3
 80046ee:	d002      	beq.n	80046f6 <__swsetup_r+0x46>
 80046f0:	4628      	mov	r0, r5
 80046f2:	f000 f8b7 	bl	8004864 <_free_r>
 80046f6:	2300      	movs	r3, #0
 80046f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80046fa:	89a3      	ldrh	r3, [r4, #12]
 80046fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004700:	81a3      	strh	r3, [r4, #12]
 8004702:	2300      	movs	r3, #0
 8004704:	6063      	str	r3, [r4, #4]
 8004706:	6923      	ldr	r3, [r4, #16]
 8004708:	6023      	str	r3, [r4, #0]
 800470a:	89a3      	ldrh	r3, [r4, #12]
 800470c:	f043 0308 	orr.w	r3, r3, #8
 8004710:	81a3      	strh	r3, [r4, #12]
 8004712:	6923      	ldr	r3, [r4, #16]
 8004714:	b94b      	cbnz	r3, 800472a <__swsetup_r+0x7a>
 8004716:	89a3      	ldrh	r3, [r4, #12]
 8004718:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800471c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004720:	d003      	beq.n	800472a <__swsetup_r+0x7a>
 8004722:	4621      	mov	r1, r4
 8004724:	4628      	mov	r0, r5
 8004726:	f000 fa67 	bl	8004bf8 <__smakebuf_r>
 800472a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800472e:	f013 0201 	ands.w	r2, r3, #1
 8004732:	d00a      	beq.n	800474a <__swsetup_r+0x9a>
 8004734:	2200      	movs	r2, #0
 8004736:	60a2      	str	r2, [r4, #8]
 8004738:	6962      	ldr	r2, [r4, #20]
 800473a:	4252      	negs	r2, r2
 800473c:	61a2      	str	r2, [r4, #24]
 800473e:	6922      	ldr	r2, [r4, #16]
 8004740:	b942      	cbnz	r2, 8004754 <__swsetup_r+0xa4>
 8004742:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004746:	d1c5      	bne.n	80046d4 <__swsetup_r+0x24>
 8004748:	bd38      	pop	{r3, r4, r5, pc}
 800474a:	0799      	lsls	r1, r3, #30
 800474c:	bf58      	it	pl
 800474e:	6962      	ldrpl	r2, [r4, #20]
 8004750:	60a2      	str	r2, [r4, #8]
 8004752:	e7f4      	b.n	800473e <__swsetup_r+0x8e>
 8004754:	2000      	movs	r0, #0
 8004756:	e7f7      	b.n	8004748 <__swsetup_r+0x98>
 8004758:	20000020 	.word	0x20000020

0800475c <memset>:
 800475c:	4402      	add	r2, r0
 800475e:	4603      	mov	r3, r0
 8004760:	4293      	cmp	r3, r2
 8004762:	d100      	bne.n	8004766 <memset+0xa>
 8004764:	4770      	bx	lr
 8004766:	f803 1b01 	strb.w	r1, [r3], #1
 800476a:	e7f9      	b.n	8004760 <memset+0x4>

0800476c <_close_r>:
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	4d06      	ldr	r5, [pc, #24]	@ (8004788 <_close_r+0x1c>)
 8004770:	2300      	movs	r3, #0
 8004772:	4604      	mov	r4, r0
 8004774:	4608      	mov	r0, r1
 8004776:	602b      	str	r3, [r5, #0]
 8004778:	f7fc f9e9 	bl	8000b4e <_close>
 800477c:	1c43      	adds	r3, r0, #1
 800477e:	d102      	bne.n	8004786 <_close_r+0x1a>
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	b103      	cbz	r3, 8004786 <_close_r+0x1a>
 8004784:	6023      	str	r3, [r4, #0]
 8004786:	bd38      	pop	{r3, r4, r5, pc}
 8004788:	20012fb8 	.word	0x20012fb8

0800478c <_lseek_r>:
 800478c:	b538      	push	{r3, r4, r5, lr}
 800478e:	4d07      	ldr	r5, [pc, #28]	@ (80047ac <_lseek_r+0x20>)
 8004790:	4604      	mov	r4, r0
 8004792:	4608      	mov	r0, r1
 8004794:	4611      	mov	r1, r2
 8004796:	2200      	movs	r2, #0
 8004798:	602a      	str	r2, [r5, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	f7fc f9fe 	bl	8000b9c <_lseek>
 80047a0:	1c43      	adds	r3, r0, #1
 80047a2:	d102      	bne.n	80047aa <_lseek_r+0x1e>
 80047a4:	682b      	ldr	r3, [r5, #0]
 80047a6:	b103      	cbz	r3, 80047aa <_lseek_r+0x1e>
 80047a8:	6023      	str	r3, [r4, #0]
 80047aa:	bd38      	pop	{r3, r4, r5, pc}
 80047ac:	20012fb8 	.word	0x20012fb8

080047b0 <_read_r>:
 80047b0:	b538      	push	{r3, r4, r5, lr}
 80047b2:	4d07      	ldr	r5, [pc, #28]	@ (80047d0 <_read_r+0x20>)
 80047b4:	4604      	mov	r4, r0
 80047b6:	4608      	mov	r0, r1
 80047b8:	4611      	mov	r1, r2
 80047ba:	2200      	movs	r2, #0
 80047bc:	602a      	str	r2, [r5, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	f7fc f98c 	bl	8000adc <_read>
 80047c4:	1c43      	adds	r3, r0, #1
 80047c6:	d102      	bne.n	80047ce <_read_r+0x1e>
 80047c8:	682b      	ldr	r3, [r5, #0]
 80047ca:	b103      	cbz	r3, 80047ce <_read_r+0x1e>
 80047cc:	6023      	str	r3, [r4, #0]
 80047ce:	bd38      	pop	{r3, r4, r5, pc}
 80047d0:	20012fb8 	.word	0x20012fb8

080047d4 <_write_r>:
 80047d4:	b538      	push	{r3, r4, r5, lr}
 80047d6:	4d07      	ldr	r5, [pc, #28]	@ (80047f4 <_write_r+0x20>)
 80047d8:	4604      	mov	r4, r0
 80047da:	4608      	mov	r0, r1
 80047dc:	4611      	mov	r1, r2
 80047de:	2200      	movs	r2, #0
 80047e0:	602a      	str	r2, [r5, #0]
 80047e2:	461a      	mov	r2, r3
 80047e4:	f7fc f997 	bl	8000b16 <_write>
 80047e8:	1c43      	adds	r3, r0, #1
 80047ea:	d102      	bne.n	80047f2 <_write_r+0x1e>
 80047ec:	682b      	ldr	r3, [r5, #0]
 80047ee:	b103      	cbz	r3, 80047f2 <_write_r+0x1e>
 80047f0:	6023      	str	r3, [r4, #0]
 80047f2:	bd38      	pop	{r3, r4, r5, pc}
 80047f4:	20012fb8 	.word	0x20012fb8

080047f8 <__libc_init_array>:
 80047f8:	b570      	push	{r4, r5, r6, lr}
 80047fa:	4d0d      	ldr	r5, [pc, #52]	@ (8004830 <__libc_init_array+0x38>)
 80047fc:	4c0d      	ldr	r4, [pc, #52]	@ (8004834 <__libc_init_array+0x3c>)
 80047fe:	1b64      	subs	r4, r4, r5
 8004800:	10a4      	asrs	r4, r4, #2
 8004802:	2600      	movs	r6, #0
 8004804:	42a6      	cmp	r6, r4
 8004806:	d109      	bne.n	800481c <__libc_init_array+0x24>
 8004808:	4d0b      	ldr	r5, [pc, #44]	@ (8004838 <__libc_init_array+0x40>)
 800480a:	4c0c      	ldr	r4, [pc, #48]	@ (800483c <__libc_init_array+0x44>)
 800480c:	f000 fa70 	bl	8004cf0 <_init>
 8004810:	1b64      	subs	r4, r4, r5
 8004812:	10a4      	asrs	r4, r4, #2
 8004814:	2600      	movs	r6, #0
 8004816:	42a6      	cmp	r6, r4
 8004818:	d105      	bne.n	8004826 <__libc_init_array+0x2e>
 800481a:	bd70      	pop	{r4, r5, r6, pc}
 800481c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004820:	4798      	blx	r3
 8004822:	3601      	adds	r6, #1
 8004824:	e7ee      	b.n	8004804 <__libc_init_array+0xc>
 8004826:	f855 3b04 	ldr.w	r3, [r5], #4
 800482a:	4798      	blx	r3
 800482c:	3601      	adds	r6, #1
 800482e:	e7f2      	b.n	8004816 <__libc_init_array+0x1e>
 8004830:	08004d88 	.word	0x08004d88
 8004834:	08004d88 	.word	0x08004d88
 8004838:	08004d88 	.word	0x08004d88
 800483c:	08004d8c 	.word	0x08004d8c

08004840 <__retarget_lock_init_recursive>:
 8004840:	4770      	bx	lr

08004842 <__retarget_lock_acquire_recursive>:
 8004842:	4770      	bx	lr

08004844 <__retarget_lock_release_recursive>:
 8004844:	4770      	bx	lr

08004846 <memcpy>:
 8004846:	440a      	add	r2, r1
 8004848:	4291      	cmp	r1, r2
 800484a:	f100 33ff 	add.w	r3, r0, #4294967295
 800484e:	d100      	bne.n	8004852 <memcpy+0xc>
 8004850:	4770      	bx	lr
 8004852:	b510      	push	{r4, lr}
 8004854:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004858:	f803 4f01 	strb.w	r4, [r3, #1]!
 800485c:	4291      	cmp	r1, r2
 800485e:	d1f9      	bne.n	8004854 <memcpy+0xe>
 8004860:	bd10      	pop	{r4, pc}
	...

08004864 <_free_r>:
 8004864:	b538      	push	{r3, r4, r5, lr}
 8004866:	4605      	mov	r5, r0
 8004868:	2900      	cmp	r1, #0
 800486a:	d041      	beq.n	80048f0 <_free_r+0x8c>
 800486c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004870:	1f0c      	subs	r4, r1, #4
 8004872:	2b00      	cmp	r3, #0
 8004874:	bfb8      	it	lt
 8004876:	18e4      	addlt	r4, r4, r3
 8004878:	f000 f8e0 	bl	8004a3c <__malloc_lock>
 800487c:	4a1d      	ldr	r2, [pc, #116]	@ (80048f4 <_free_r+0x90>)
 800487e:	6813      	ldr	r3, [r2, #0]
 8004880:	b933      	cbnz	r3, 8004890 <_free_r+0x2c>
 8004882:	6063      	str	r3, [r4, #4]
 8004884:	6014      	str	r4, [r2, #0]
 8004886:	4628      	mov	r0, r5
 8004888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800488c:	f000 b8dc 	b.w	8004a48 <__malloc_unlock>
 8004890:	42a3      	cmp	r3, r4
 8004892:	d908      	bls.n	80048a6 <_free_r+0x42>
 8004894:	6820      	ldr	r0, [r4, #0]
 8004896:	1821      	adds	r1, r4, r0
 8004898:	428b      	cmp	r3, r1
 800489a:	bf01      	itttt	eq
 800489c:	6819      	ldreq	r1, [r3, #0]
 800489e:	685b      	ldreq	r3, [r3, #4]
 80048a0:	1809      	addeq	r1, r1, r0
 80048a2:	6021      	streq	r1, [r4, #0]
 80048a4:	e7ed      	b.n	8004882 <_free_r+0x1e>
 80048a6:	461a      	mov	r2, r3
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	b10b      	cbz	r3, 80048b0 <_free_r+0x4c>
 80048ac:	42a3      	cmp	r3, r4
 80048ae:	d9fa      	bls.n	80048a6 <_free_r+0x42>
 80048b0:	6811      	ldr	r1, [r2, #0]
 80048b2:	1850      	adds	r0, r2, r1
 80048b4:	42a0      	cmp	r0, r4
 80048b6:	d10b      	bne.n	80048d0 <_free_r+0x6c>
 80048b8:	6820      	ldr	r0, [r4, #0]
 80048ba:	4401      	add	r1, r0
 80048bc:	1850      	adds	r0, r2, r1
 80048be:	4283      	cmp	r3, r0
 80048c0:	6011      	str	r1, [r2, #0]
 80048c2:	d1e0      	bne.n	8004886 <_free_r+0x22>
 80048c4:	6818      	ldr	r0, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	6053      	str	r3, [r2, #4]
 80048ca:	4408      	add	r0, r1
 80048cc:	6010      	str	r0, [r2, #0]
 80048ce:	e7da      	b.n	8004886 <_free_r+0x22>
 80048d0:	d902      	bls.n	80048d8 <_free_r+0x74>
 80048d2:	230c      	movs	r3, #12
 80048d4:	602b      	str	r3, [r5, #0]
 80048d6:	e7d6      	b.n	8004886 <_free_r+0x22>
 80048d8:	6820      	ldr	r0, [r4, #0]
 80048da:	1821      	adds	r1, r4, r0
 80048dc:	428b      	cmp	r3, r1
 80048de:	bf04      	itt	eq
 80048e0:	6819      	ldreq	r1, [r3, #0]
 80048e2:	685b      	ldreq	r3, [r3, #4]
 80048e4:	6063      	str	r3, [r4, #4]
 80048e6:	bf04      	itt	eq
 80048e8:	1809      	addeq	r1, r1, r0
 80048ea:	6021      	streq	r1, [r4, #0]
 80048ec:	6054      	str	r4, [r2, #4]
 80048ee:	e7ca      	b.n	8004886 <_free_r+0x22>
 80048f0:	bd38      	pop	{r3, r4, r5, pc}
 80048f2:	bf00      	nop
 80048f4:	20012fc4 	.word	0x20012fc4

080048f8 <sbrk_aligned>:
 80048f8:	b570      	push	{r4, r5, r6, lr}
 80048fa:	4e0f      	ldr	r6, [pc, #60]	@ (8004938 <sbrk_aligned+0x40>)
 80048fc:	460c      	mov	r4, r1
 80048fe:	6831      	ldr	r1, [r6, #0]
 8004900:	4605      	mov	r5, r0
 8004902:	b911      	cbnz	r1, 800490a <sbrk_aligned+0x12>
 8004904:	f000 f9d6 	bl	8004cb4 <_sbrk_r>
 8004908:	6030      	str	r0, [r6, #0]
 800490a:	4621      	mov	r1, r4
 800490c:	4628      	mov	r0, r5
 800490e:	f000 f9d1 	bl	8004cb4 <_sbrk_r>
 8004912:	1c43      	adds	r3, r0, #1
 8004914:	d103      	bne.n	800491e <sbrk_aligned+0x26>
 8004916:	f04f 34ff 	mov.w	r4, #4294967295
 800491a:	4620      	mov	r0, r4
 800491c:	bd70      	pop	{r4, r5, r6, pc}
 800491e:	1cc4      	adds	r4, r0, #3
 8004920:	f024 0403 	bic.w	r4, r4, #3
 8004924:	42a0      	cmp	r0, r4
 8004926:	d0f8      	beq.n	800491a <sbrk_aligned+0x22>
 8004928:	1a21      	subs	r1, r4, r0
 800492a:	4628      	mov	r0, r5
 800492c:	f000 f9c2 	bl	8004cb4 <_sbrk_r>
 8004930:	3001      	adds	r0, #1
 8004932:	d1f2      	bne.n	800491a <sbrk_aligned+0x22>
 8004934:	e7ef      	b.n	8004916 <sbrk_aligned+0x1e>
 8004936:	bf00      	nop
 8004938:	20012fc0 	.word	0x20012fc0

0800493c <_malloc_r>:
 800493c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004940:	1ccd      	adds	r5, r1, #3
 8004942:	f025 0503 	bic.w	r5, r5, #3
 8004946:	3508      	adds	r5, #8
 8004948:	2d0c      	cmp	r5, #12
 800494a:	bf38      	it	cc
 800494c:	250c      	movcc	r5, #12
 800494e:	2d00      	cmp	r5, #0
 8004950:	4606      	mov	r6, r0
 8004952:	db01      	blt.n	8004958 <_malloc_r+0x1c>
 8004954:	42a9      	cmp	r1, r5
 8004956:	d904      	bls.n	8004962 <_malloc_r+0x26>
 8004958:	230c      	movs	r3, #12
 800495a:	6033      	str	r3, [r6, #0]
 800495c:	2000      	movs	r0, #0
 800495e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004962:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a38 <_malloc_r+0xfc>
 8004966:	f000 f869 	bl	8004a3c <__malloc_lock>
 800496a:	f8d8 3000 	ldr.w	r3, [r8]
 800496e:	461c      	mov	r4, r3
 8004970:	bb44      	cbnz	r4, 80049c4 <_malloc_r+0x88>
 8004972:	4629      	mov	r1, r5
 8004974:	4630      	mov	r0, r6
 8004976:	f7ff ffbf 	bl	80048f8 <sbrk_aligned>
 800497a:	1c43      	adds	r3, r0, #1
 800497c:	4604      	mov	r4, r0
 800497e:	d158      	bne.n	8004a32 <_malloc_r+0xf6>
 8004980:	f8d8 4000 	ldr.w	r4, [r8]
 8004984:	4627      	mov	r7, r4
 8004986:	2f00      	cmp	r7, #0
 8004988:	d143      	bne.n	8004a12 <_malloc_r+0xd6>
 800498a:	2c00      	cmp	r4, #0
 800498c:	d04b      	beq.n	8004a26 <_malloc_r+0xea>
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	4639      	mov	r1, r7
 8004992:	4630      	mov	r0, r6
 8004994:	eb04 0903 	add.w	r9, r4, r3
 8004998:	f000 f98c 	bl	8004cb4 <_sbrk_r>
 800499c:	4581      	cmp	r9, r0
 800499e:	d142      	bne.n	8004a26 <_malloc_r+0xea>
 80049a0:	6821      	ldr	r1, [r4, #0]
 80049a2:	1a6d      	subs	r5, r5, r1
 80049a4:	4629      	mov	r1, r5
 80049a6:	4630      	mov	r0, r6
 80049a8:	f7ff ffa6 	bl	80048f8 <sbrk_aligned>
 80049ac:	3001      	adds	r0, #1
 80049ae:	d03a      	beq.n	8004a26 <_malloc_r+0xea>
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	442b      	add	r3, r5
 80049b4:	6023      	str	r3, [r4, #0]
 80049b6:	f8d8 3000 	ldr.w	r3, [r8]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	bb62      	cbnz	r2, 8004a18 <_malloc_r+0xdc>
 80049be:	f8c8 7000 	str.w	r7, [r8]
 80049c2:	e00f      	b.n	80049e4 <_malloc_r+0xa8>
 80049c4:	6822      	ldr	r2, [r4, #0]
 80049c6:	1b52      	subs	r2, r2, r5
 80049c8:	d420      	bmi.n	8004a0c <_malloc_r+0xd0>
 80049ca:	2a0b      	cmp	r2, #11
 80049cc:	d917      	bls.n	80049fe <_malloc_r+0xc2>
 80049ce:	1961      	adds	r1, r4, r5
 80049d0:	42a3      	cmp	r3, r4
 80049d2:	6025      	str	r5, [r4, #0]
 80049d4:	bf18      	it	ne
 80049d6:	6059      	strne	r1, [r3, #4]
 80049d8:	6863      	ldr	r3, [r4, #4]
 80049da:	bf08      	it	eq
 80049dc:	f8c8 1000 	streq.w	r1, [r8]
 80049e0:	5162      	str	r2, [r4, r5]
 80049e2:	604b      	str	r3, [r1, #4]
 80049e4:	4630      	mov	r0, r6
 80049e6:	f000 f82f 	bl	8004a48 <__malloc_unlock>
 80049ea:	f104 000b 	add.w	r0, r4, #11
 80049ee:	1d23      	adds	r3, r4, #4
 80049f0:	f020 0007 	bic.w	r0, r0, #7
 80049f4:	1ac2      	subs	r2, r0, r3
 80049f6:	bf1c      	itt	ne
 80049f8:	1a1b      	subne	r3, r3, r0
 80049fa:	50a3      	strne	r3, [r4, r2]
 80049fc:	e7af      	b.n	800495e <_malloc_r+0x22>
 80049fe:	6862      	ldr	r2, [r4, #4]
 8004a00:	42a3      	cmp	r3, r4
 8004a02:	bf0c      	ite	eq
 8004a04:	f8c8 2000 	streq.w	r2, [r8]
 8004a08:	605a      	strne	r2, [r3, #4]
 8004a0a:	e7eb      	b.n	80049e4 <_malloc_r+0xa8>
 8004a0c:	4623      	mov	r3, r4
 8004a0e:	6864      	ldr	r4, [r4, #4]
 8004a10:	e7ae      	b.n	8004970 <_malloc_r+0x34>
 8004a12:	463c      	mov	r4, r7
 8004a14:	687f      	ldr	r7, [r7, #4]
 8004a16:	e7b6      	b.n	8004986 <_malloc_r+0x4a>
 8004a18:	461a      	mov	r2, r3
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	42a3      	cmp	r3, r4
 8004a1e:	d1fb      	bne.n	8004a18 <_malloc_r+0xdc>
 8004a20:	2300      	movs	r3, #0
 8004a22:	6053      	str	r3, [r2, #4]
 8004a24:	e7de      	b.n	80049e4 <_malloc_r+0xa8>
 8004a26:	230c      	movs	r3, #12
 8004a28:	6033      	str	r3, [r6, #0]
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	f000 f80c 	bl	8004a48 <__malloc_unlock>
 8004a30:	e794      	b.n	800495c <_malloc_r+0x20>
 8004a32:	6005      	str	r5, [r0, #0]
 8004a34:	e7d6      	b.n	80049e4 <_malloc_r+0xa8>
 8004a36:	bf00      	nop
 8004a38:	20012fc4 	.word	0x20012fc4

08004a3c <__malloc_lock>:
 8004a3c:	4801      	ldr	r0, [pc, #4]	@ (8004a44 <__malloc_lock+0x8>)
 8004a3e:	f7ff bf00 	b.w	8004842 <__retarget_lock_acquire_recursive>
 8004a42:	bf00      	nop
 8004a44:	20012fbc 	.word	0x20012fbc

08004a48 <__malloc_unlock>:
 8004a48:	4801      	ldr	r0, [pc, #4]	@ (8004a50 <__malloc_unlock+0x8>)
 8004a4a:	f7ff befb 	b.w	8004844 <__retarget_lock_release_recursive>
 8004a4e:	bf00      	nop
 8004a50:	20012fbc 	.word	0x20012fbc

08004a54 <__sflush_r>:
 8004a54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a5c:	0716      	lsls	r6, r2, #28
 8004a5e:	4605      	mov	r5, r0
 8004a60:	460c      	mov	r4, r1
 8004a62:	d454      	bmi.n	8004b0e <__sflush_r+0xba>
 8004a64:	684b      	ldr	r3, [r1, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	dc02      	bgt.n	8004a70 <__sflush_r+0x1c>
 8004a6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	dd48      	ble.n	8004b02 <__sflush_r+0xae>
 8004a70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a72:	2e00      	cmp	r6, #0
 8004a74:	d045      	beq.n	8004b02 <__sflush_r+0xae>
 8004a76:	2300      	movs	r3, #0
 8004a78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a7c:	682f      	ldr	r7, [r5, #0]
 8004a7e:	6a21      	ldr	r1, [r4, #32]
 8004a80:	602b      	str	r3, [r5, #0]
 8004a82:	d030      	beq.n	8004ae6 <__sflush_r+0x92>
 8004a84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a86:	89a3      	ldrh	r3, [r4, #12]
 8004a88:	0759      	lsls	r1, r3, #29
 8004a8a:	d505      	bpl.n	8004a98 <__sflush_r+0x44>
 8004a8c:	6863      	ldr	r3, [r4, #4]
 8004a8e:	1ad2      	subs	r2, r2, r3
 8004a90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a92:	b10b      	cbz	r3, 8004a98 <__sflush_r+0x44>
 8004a94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a96:	1ad2      	subs	r2, r2, r3
 8004a98:	2300      	movs	r3, #0
 8004a9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a9c:	6a21      	ldr	r1, [r4, #32]
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	47b0      	blx	r6
 8004aa2:	1c43      	adds	r3, r0, #1
 8004aa4:	89a3      	ldrh	r3, [r4, #12]
 8004aa6:	d106      	bne.n	8004ab6 <__sflush_r+0x62>
 8004aa8:	6829      	ldr	r1, [r5, #0]
 8004aaa:	291d      	cmp	r1, #29
 8004aac:	d82b      	bhi.n	8004b06 <__sflush_r+0xb2>
 8004aae:	4a2a      	ldr	r2, [pc, #168]	@ (8004b58 <__sflush_r+0x104>)
 8004ab0:	410a      	asrs	r2, r1
 8004ab2:	07d6      	lsls	r6, r2, #31
 8004ab4:	d427      	bmi.n	8004b06 <__sflush_r+0xb2>
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	6062      	str	r2, [r4, #4]
 8004aba:	04d9      	lsls	r1, r3, #19
 8004abc:	6922      	ldr	r2, [r4, #16]
 8004abe:	6022      	str	r2, [r4, #0]
 8004ac0:	d504      	bpl.n	8004acc <__sflush_r+0x78>
 8004ac2:	1c42      	adds	r2, r0, #1
 8004ac4:	d101      	bne.n	8004aca <__sflush_r+0x76>
 8004ac6:	682b      	ldr	r3, [r5, #0]
 8004ac8:	b903      	cbnz	r3, 8004acc <__sflush_r+0x78>
 8004aca:	6560      	str	r0, [r4, #84]	@ 0x54
 8004acc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ace:	602f      	str	r7, [r5, #0]
 8004ad0:	b1b9      	cbz	r1, 8004b02 <__sflush_r+0xae>
 8004ad2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ad6:	4299      	cmp	r1, r3
 8004ad8:	d002      	beq.n	8004ae0 <__sflush_r+0x8c>
 8004ada:	4628      	mov	r0, r5
 8004adc:	f7ff fec2 	bl	8004864 <_free_r>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ae4:	e00d      	b.n	8004b02 <__sflush_r+0xae>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	4628      	mov	r0, r5
 8004aea:	47b0      	blx	r6
 8004aec:	4602      	mov	r2, r0
 8004aee:	1c50      	adds	r0, r2, #1
 8004af0:	d1c9      	bne.n	8004a86 <__sflush_r+0x32>
 8004af2:	682b      	ldr	r3, [r5, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0c6      	beq.n	8004a86 <__sflush_r+0x32>
 8004af8:	2b1d      	cmp	r3, #29
 8004afa:	d001      	beq.n	8004b00 <__sflush_r+0xac>
 8004afc:	2b16      	cmp	r3, #22
 8004afe:	d11e      	bne.n	8004b3e <__sflush_r+0xea>
 8004b00:	602f      	str	r7, [r5, #0]
 8004b02:	2000      	movs	r0, #0
 8004b04:	e022      	b.n	8004b4c <__sflush_r+0xf8>
 8004b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b0a:	b21b      	sxth	r3, r3
 8004b0c:	e01b      	b.n	8004b46 <__sflush_r+0xf2>
 8004b0e:	690f      	ldr	r7, [r1, #16]
 8004b10:	2f00      	cmp	r7, #0
 8004b12:	d0f6      	beq.n	8004b02 <__sflush_r+0xae>
 8004b14:	0793      	lsls	r3, r2, #30
 8004b16:	680e      	ldr	r6, [r1, #0]
 8004b18:	bf08      	it	eq
 8004b1a:	694b      	ldreq	r3, [r1, #20]
 8004b1c:	600f      	str	r7, [r1, #0]
 8004b1e:	bf18      	it	ne
 8004b20:	2300      	movne	r3, #0
 8004b22:	eba6 0807 	sub.w	r8, r6, r7
 8004b26:	608b      	str	r3, [r1, #8]
 8004b28:	f1b8 0f00 	cmp.w	r8, #0
 8004b2c:	dde9      	ble.n	8004b02 <__sflush_r+0xae>
 8004b2e:	6a21      	ldr	r1, [r4, #32]
 8004b30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004b32:	4643      	mov	r3, r8
 8004b34:	463a      	mov	r2, r7
 8004b36:	4628      	mov	r0, r5
 8004b38:	47b0      	blx	r6
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	dc08      	bgt.n	8004b50 <__sflush_r+0xfc>
 8004b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b46:	81a3      	strh	r3, [r4, #12]
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b50:	4407      	add	r7, r0
 8004b52:	eba8 0800 	sub.w	r8, r8, r0
 8004b56:	e7e7      	b.n	8004b28 <__sflush_r+0xd4>
 8004b58:	dfbffffe 	.word	0xdfbffffe

08004b5c <_fflush_r>:
 8004b5c:	b538      	push	{r3, r4, r5, lr}
 8004b5e:	690b      	ldr	r3, [r1, #16]
 8004b60:	4605      	mov	r5, r0
 8004b62:	460c      	mov	r4, r1
 8004b64:	b913      	cbnz	r3, 8004b6c <_fflush_r+0x10>
 8004b66:	2500      	movs	r5, #0
 8004b68:	4628      	mov	r0, r5
 8004b6a:	bd38      	pop	{r3, r4, r5, pc}
 8004b6c:	b118      	cbz	r0, 8004b76 <_fflush_r+0x1a>
 8004b6e:	6a03      	ldr	r3, [r0, #32]
 8004b70:	b90b      	cbnz	r3, 8004b76 <_fflush_r+0x1a>
 8004b72:	f7ff fc87 	bl	8004484 <__sinit>
 8004b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0f3      	beq.n	8004b66 <_fflush_r+0xa>
 8004b7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b80:	07d0      	lsls	r0, r2, #31
 8004b82:	d404      	bmi.n	8004b8e <_fflush_r+0x32>
 8004b84:	0599      	lsls	r1, r3, #22
 8004b86:	d402      	bmi.n	8004b8e <_fflush_r+0x32>
 8004b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b8a:	f7ff fe5a 	bl	8004842 <__retarget_lock_acquire_recursive>
 8004b8e:	4628      	mov	r0, r5
 8004b90:	4621      	mov	r1, r4
 8004b92:	f7ff ff5f 	bl	8004a54 <__sflush_r>
 8004b96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b98:	07da      	lsls	r2, r3, #31
 8004b9a:	4605      	mov	r5, r0
 8004b9c:	d4e4      	bmi.n	8004b68 <_fflush_r+0xc>
 8004b9e:	89a3      	ldrh	r3, [r4, #12]
 8004ba0:	059b      	lsls	r3, r3, #22
 8004ba2:	d4e1      	bmi.n	8004b68 <_fflush_r+0xc>
 8004ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ba6:	f7ff fe4d 	bl	8004844 <__retarget_lock_release_recursive>
 8004baa:	e7dd      	b.n	8004b68 <_fflush_r+0xc>

08004bac <__swhatbuf_r>:
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	460c      	mov	r4, r1
 8004bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb4:	2900      	cmp	r1, #0
 8004bb6:	b096      	sub	sp, #88	@ 0x58
 8004bb8:	4615      	mov	r5, r2
 8004bba:	461e      	mov	r6, r3
 8004bbc:	da0d      	bge.n	8004bda <__swhatbuf_r+0x2e>
 8004bbe:	89a3      	ldrh	r3, [r4, #12]
 8004bc0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004bc4:	f04f 0100 	mov.w	r1, #0
 8004bc8:	bf14      	ite	ne
 8004bca:	2340      	movne	r3, #64	@ 0x40
 8004bcc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	6031      	str	r1, [r6, #0]
 8004bd4:	602b      	str	r3, [r5, #0]
 8004bd6:	b016      	add	sp, #88	@ 0x58
 8004bd8:	bd70      	pop	{r4, r5, r6, pc}
 8004bda:	466a      	mov	r2, sp
 8004bdc:	f000 f848 	bl	8004c70 <_fstat_r>
 8004be0:	2800      	cmp	r0, #0
 8004be2:	dbec      	blt.n	8004bbe <__swhatbuf_r+0x12>
 8004be4:	9901      	ldr	r1, [sp, #4]
 8004be6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004bea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004bee:	4259      	negs	r1, r3
 8004bf0:	4159      	adcs	r1, r3
 8004bf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bf6:	e7eb      	b.n	8004bd0 <__swhatbuf_r+0x24>

08004bf8 <__smakebuf_r>:
 8004bf8:	898b      	ldrh	r3, [r1, #12]
 8004bfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bfc:	079d      	lsls	r5, r3, #30
 8004bfe:	4606      	mov	r6, r0
 8004c00:	460c      	mov	r4, r1
 8004c02:	d507      	bpl.n	8004c14 <__smakebuf_r+0x1c>
 8004c04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004c08:	6023      	str	r3, [r4, #0]
 8004c0a:	6123      	str	r3, [r4, #16]
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	6163      	str	r3, [r4, #20]
 8004c10:	b003      	add	sp, #12
 8004c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c14:	ab01      	add	r3, sp, #4
 8004c16:	466a      	mov	r2, sp
 8004c18:	f7ff ffc8 	bl	8004bac <__swhatbuf_r>
 8004c1c:	9f00      	ldr	r7, [sp, #0]
 8004c1e:	4605      	mov	r5, r0
 8004c20:	4639      	mov	r1, r7
 8004c22:	4630      	mov	r0, r6
 8004c24:	f7ff fe8a 	bl	800493c <_malloc_r>
 8004c28:	b948      	cbnz	r0, 8004c3e <__smakebuf_r+0x46>
 8004c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c2e:	059a      	lsls	r2, r3, #22
 8004c30:	d4ee      	bmi.n	8004c10 <__smakebuf_r+0x18>
 8004c32:	f023 0303 	bic.w	r3, r3, #3
 8004c36:	f043 0302 	orr.w	r3, r3, #2
 8004c3a:	81a3      	strh	r3, [r4, #12]
 8004c3c:	e7e2      	b.n	8004c04 <__smakebuf_r+0xc>
 8004c3e:	89a3      	ldrh	r3, [r4, #12]
 8004c40:	6020      	str	r0, [r4, #0]
 8004c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c46:	81a3      	strh	r3, [r4, #12]
 8004c48:	9b01      	ldr	r3, [sp, #4]
 8004c4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c4e:	b15b      	cbz	r3, 8004c68 <__smakebuf_r+0x70>
 8004c50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c54:	4630      	mov	r0, r6
 8004c56:	f000 f81d 	bl	8004c94 <_isatty_r>
 8004c5a:	b128      	cbz	r0, 8004c68 <__smakebuf_r+0x70>
 8004c5c:	89a3      	ldrh	r3, [r4, #12]
 8004c5e:	f023 0303 	bic.w	r3, r3, #3
 8004c62:	f043 0301 	orr.w	r3, r3, #1
 8004c66:	81a3      	strh	r3, [r4, #12]
 8004c68:	89a3      	ldrh	r3, [r4, #12]
 8004c6a:	431d      	orrs	r5, r3
 8004c6c:	81a5      	strh	r5, [r4, #12]
 8004c6e:	e7cf      	b.n	8004c10 <__smakebuf_r+0x18>

08004c70 <_fstat_r>:
 8004c70:	b538      	push	{r3, r4, r5, lr}
 8004c72:	4d07      	ldr	r5, [pc, #28]	@ (8004c90 <_fstat_r+0x20>)
 8004c74:	2300      	movs	r3, #0
 8004c76:	4604      	mov	r4, r0
 8004c78:	4608      	mov	r0, r1
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	602b      	str	r3, [r5, #0]
 8004c7e:	f7fb ff72 	bl	8000b66 <_fstat>
 8004c82:	1c43      	adds	r3, r0, #1
 8004c84:	d102      	bne.n	8004c8c <_fstat_r+0x1c>
 8004c86:	682b      	ldr	r3, [r5, #0]
 8004c88:	b103      	cbz	r3, 8004c8c <_fstat_r+0x1c>
 8004c8a:	6023      	str	r3, [r4, #0]
 8004c8c:	bd38      	pop	{r3, r4, r5, pc}
 8004c8e:	bf00      	nop
 8004c90:	20012fb8 	.word	0x20012fb8

08004c94 <_isatty_r>:
 8004c94:	b538      	push	{r3, r4, r5, lr}
 8004c96:	4d06      	ldr	r5, [pc, #24]	@ (8004cb0 <_isatty_r+0x1c>)
 8004c98:	2300      	movs	r3, #0
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	4608      	mov	r0, r1
 8004c9e:	602b      	str	r3, [r5, #0]
 8004ca0:	f7fb ff71 	bl	8000b86 <_isatty>
 8004ca4:	1c43      	adds	r3, r0, #1
 8004ca6:	d102      	bne.n	8004cae <_isatty_r+0x1a>
 8004ca8:	682b      	ldr	r3, [r5, #0]
 8004caa:	b103      	cbz	r3, 8004cae <_isatty_r+0x1a>
 8004cac:	6023      	str	r3, [r4, #0]
 8004cae:	bd38      	pop	{r3, r4, r5, pc}
 8004cb0:	20012fb8 	.word	0x20012fb8

08004cb4 <_sbrk_r>:
 8004cb4:	b538      	push	{r3, r4, r5, lr}
 8004cb6:	4d06      	ldr	r5, [pc, #24]	@ (8004cd0 <_sbrk_r+0x1c>)
 8004cb8:	2300      	movs	r3, #0
 8004cba:	4604      	mov	r4, r0
 8004cbc:	4608      	mov	r0, r1
 8004cbe:	602b      	str	r3, [r5, #0]
 8004cc0:	f000 f808 	bl	8004cd4 <_sbrk>
 8004cc4:	1c43      	adds	r3, r0, #1
 8004cc6:	d102      	bne.n	8004cce <_sbrk_r+0x1a>
 8004cc8:	682b      	ldr	r3, [r5, #0]
 8004cca:	b103      	cbz	r3, 8004cce <_sbrk_r+0x1a>
 8004ccc:	6023      	str	r3, [r4, #0]
 8004cce:	bd38      	pop	{r3, r4, r5, pc}
 8004cd0:	20012fb8 	.word	0x20012fb8

08004cd4 <_sbrk>:
 8004cd4:	4a04      	ldr	r2, [pc, #16]	@ (8004ce8 <_sbrk+0x14>)
 8004cd6:	6811      	ldr	r1, [r2, #0]
 8004cd8:	4603      	mov	r3, r0
 8004cda:	b909      	cbnz	r1, 8004ce0 <_sbrk+0xc>
 8004cdc:	4903      	ldr	r1, [pc, #12]	@ (8004cec <_sbrk+0x18>)
 8004cde:	6011      	str	r1, [r2, #0]
 8004ce0:	6810      	ldr	r0, [r2, #0]
 8004ce2:	4403      	add	r3, r0
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	4770      	bx	lr
 8004ce8:	20012fc8 	.word	0x20012fc8
 8004cec:	20012fd0 	.word	0x20012fd0

08004cf0 <_init>:
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	bf00      	nop
 8004cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf6:	bc08      	pop	{r3}
 8004cf8:	469e      	mov	lr, r3
 8004cfa:	4770      	bx	lr

08004cfc <_fini>:
 8004cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfe:	bf00      	nop
 8004d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d02:	bc08      	pop	{r3}
 8004d04:	469e      	mov	lr, r3
 8004d06:	4770      	bx	lr
